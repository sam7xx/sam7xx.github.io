name: 修复stellar主题依赖并部署
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 拉取代码（含主题子模块）
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'  # 确保主题子模块被拉取
          lfs: true

      - name: 检查主题目录是否存在
        run: |
          echo "===== 主题目录检查 ====="
          if [ ! -d "themes/stellar" ]; then
            echo "❌ 错误：未找到themes/stellar目录，尝试手动克隆主题..."
            # 若子模块拉取失败，手动克隆stellar主题
            git clone https://github.com/xaoxuu/hexo-theme-stellar.git themes/stellar
          fi
          # 确认主题目录存在
          [ -d "themes/stellar" ] && echo "✅ stellar主题目录存在" || { echo "❌ 主题目录仍缺失"; exit 1; }
          # 显示主题目录内容，确认完整性
          echo "===== 主题目录内容 ====="
          ls -la themes/stellar

      - name: 安装Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x  # 稳定版本，避免兼容性问题
          cache: 'npm'

      - name: 强制安装核心依赖（含主题）
        run: |
          echo "===== 安装Hexo CLI ====="
          npm install hexo-cli -g --verbose
          
          echo "===== 安装根目录依赖 ====="
          # 强制安装hexo和stellar主题作为项目依赖
          npm install hexo@8.0.0 --save --verbose  # 明确指定与日志匹配的hexo版本
          npm install hexo-theme-stellar@latest --save --verbose  # 关键：安装stellar主题依赖
          
          echo "===== 安装主题内部依赖 ====="
          cd themes/stellar && npm install --verbose && cd ../../

      - name: 验证主题是否被正确识别
        run: |
          echo "===== 验证主题依赖 ====="
          npm list hexo-theme-stellar  # 确认主题已安装
          
          echo "===== 检查Hexo配置 ====="
          # 确保配置中指定了stellar主题（若未指定，临时添加）
          if ! grep -q "theme: stellar" _config.yml; then
            echo "警告：_config.yml中未设置theme: stellar，临时添加..."
            echo "theme: stellar" >> _config.yml
          fi
          cat _config.yml | grep "theme:"  # 确认主题配置

      - name: 生成public目录（带调试）
        run: |
          hexo clean --debug
          echo "===== 生成静态文件 ====="
          hexo generate --debug
          
          # 检查public目录
          if [ ! -d "public" ] || [ -z "$(ls -A public)" ]; then
            echo "❌ 错误：public目录未生成或为空"
            exit 1
          fi
          echo "===== public目录内容 ====="
          ls -la public

      - name: 部署到GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages
          force_orphan: true
          keep_files: false

      - name: 部署后验证
        run: |
          git clone -b gh-pages https://github.com/${{ github.repository }} temp-gh
          if [ ! -f "temp-gh/index.html" ]; then
            echo "❌ 部署失败：gh-pages分支无index.html"
            exit 1
          else
            echo "✅ 部署成功"
          fi
