name: Hexo自动部署
on:
  push:
    branches: [ main ]  # 主分支推送时触发
  workflow_dispatch:  # 允许手动触发

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25  # 合理超时时间

    steps:
      # 步骤1：拉取代码（含子模块）
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 完整拉取历史
          submodules: 'recursive'  # 拉取主题子模块
          lfs: true  # 支持大文件

      # 步骤2：检查必要文件
      - name: 验证项目结构
        run: |
          echo "当前目录内容："
          ls -la
          
          # 检查主题目录
          if [ ! -d "themes/stellar" ]; then
            echo "❌ 错误：未找到 themes/stellar 主题目录"
            exit 1
          fi
          
          # 检查根目录依赖文件
          if [ ! -f "package.json" ]; then
            echo "❌ 错误：未找到 package.json"
            exit 1
          fi

      # 步骤3：安装Node.js（稳定版本）
      - name: 安装Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x  # 稳定LTS版本，兼容性好
          cache: 'npm'  # 启用npm缓存
          cache-dependency-path: 'package-lock.json'  # 仅缓存根目录依赖

      # 步骤4：安装依赖
      - name: 安装项目依赖
        run: |
          # 安装Hexo CLI
          npm install hexo-cli -g
          
          # 安装根目录依赖
          npm install --force
          
          # 安装主题依赖
          cd themes/stellar && npm install --force && cd ../../

      # 步骤5：构建静态文件（核心步骤）
      - name: 生成public目录
        run: |
          # 清理旧构建
          hexo clean
          
          # 生成静态文件
          echo "开始构建public目录..."
          hexo generate
          
          # 验证构建结果
          if [ ! -d "public" ]; then
            echo "❌ 错误：构建失败，未生成public目录"
            exit 1
          fi
          
          if [ ! -f "public/index.html" ]; then
            echo "❌ 错误：public目录中缺少index.html"
            exit 1
          fi
          
          echo "✅ public目录生成成功，内容如下："
          ls -la public

      # 步骤6：部署到GitHub Pages
      - name: 部署到GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages
          force_orphan: true  # 强制刷新分支
          keep_files: false

      # 步骤7：部署到Vercel（可选）
      - name: 部署到Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./public
          vercel-args: '--prod'
        continue-on-error: true  # 非关键步骤，失败不影响整体

      # 步骤8：部署到Cloudflare Pages（可选）
      - name: 部署到Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          projectName: ${{ secrets.CF_PROJECT_NAME }}
          directory: ./public
          branch: main
        continue-on-error: true  # 非关键步骤，失败不影响整体
