name: 部署到 GitHub Pages/Vercel/Cloudflare
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      # 步骤1：拉取代码（获取仓库中的public目录）
      - name: 拉取代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 步骤2：验证public目录（确保静态文件存在）
      - name: 检查public目录完整性
        run: |
          if [ ! -d "public" ] || [ -z "$(ls -A public)" ]; then
            echo "错误：public目录不存在或为空！请确保已提前生成静态文件。"
            exit 1
          fi
          echo "public目录验证通过，文件列表："
          ls -la public

      # 步骤3：直接部署到GitHub Pages（使用现有public目录）
      - name: 部署到 GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          publish_dir: ./public  # 直接使用现有public目录
          publish_branch: gh-pages
          force_orphan: true

      # 步骤4：部署到Vercel（使用现有public目录）
      - name: 部署到 Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./public  # 指向public目录
          vercel-args: '--prod'  # 部署为生产环境
        continue-on-error: true

      # 步骤5：部署到Cloudflare Pages（使用现有public目录）
      - name: 部署到 Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          projectName: ${{ secrets.CF_PROJECT_NAME }}
          directory: ./public  # 指向public目录
          branch: main
        continue-on-error: true
