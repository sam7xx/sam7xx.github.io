[{"title":"hexo部署","path":"/博客搭建/blog/hexo博客部署/","content":"0. 前言 Hexo 部署是将本地生成的静态博客内容发布到服务器或托管平台的过程，常见的部署目标包括 GitHub Pages、Netlify、Vercel、Cloudflare Pages 等。以下是详细的部署步骤和常见问题解决方案，实现一次推送完成GitHub Pages、Vercel、Cloudflare Pages 三个平台部署。 1. 部署前提 Github/Vercel/Cloudflare账号,免费额度个人博客够用了。 一个 Git 仓库（GitHub、GitLab 均可），存放你的 Hexo 源代码（非 public 目录，需包含 _config.yml、package.json、source 等核心文件）。 本地已完成 Hexo 博客搭建，能通过 hexo g 生成 public 目录（确保本地构建正常）。 2. 部署到 GitHub Pages 适合个人博客，免费但有时候不太稳定，当备用站使用，具体操作步骤如下： 在Github新建仓库，仓库名为 yourname.github.io，确保仓库为公共仓库。 然后在仓库设置中打开Github Pages功能。 然后在博客文件夹下安装部署插件npm install hexo-deployer-git --save 修改 _config.yml主题配置文件deploy信息，详细配置如下。 主题配置文件deploy: type: git repo: https://github.com/yourname/yourname.github.io.git # 仓库地址 branch: main # 部署分支（默认 main 或 master，根据仓库设置调整） message: Hexo deploy: now(YYYY-MM-DD HH:mm:ss) # 提交信息（可选） 终端执行hexo clean hexo g hexo d # 清理、生成、部署 ，部署成功后，访问 https://yourname.github.io 即可看到博客，也可以重定向绑定自己的域名，由Cloudflare托管。GitHub Pages 绑定自定义域名 + 开启 HTTPS | 青何博客 3. 部署到 Cloudflare Pages Cloudflare Pages 提供全球 CDN 加速，国内访问速度较快，目前作为主站使用。 3.1 推送Hexo源码到 GitHub 确保仓库包含完整的 Hexo 源代码（包括 package.json、_config.yml 等），而非仅 public 目录，使用Github部署仓库修改即可。 Cloudflare Pages 需通过 Git 仓库拉取代码并自动构建，因此需先将本地代码推送到远程仓库： 初始化本地 Git 仓库（若未初始化）： cd blog # 进入 Hexo 博客根目录git branch -m main #不然会报错git init # 初始化 Git# 创建 .gitignore 文件（关键！避免提交不必要的文件）cat .gitignore EOFnode_modules/public/.deploy_git/*.log.DS_StoreThumbs.dbEOF 提交并推送代码到远程仓库： 终端git add . # 添加所有文件（排除 .gitignore 中指定的内容）git commit -m Initial commit: Hexo source code # 提交# 切换到 SSH 协议，生成 SSH 密钥，一路回车默认即可,密码可以为空。ssh-keygen -t ed25519 -C 你的GitHub邮箱cat ~/.ssh/id_ed25519.pub #查看公钥内容（复制全部输出）#登录 GitHub，进入 `Settings` → `SSH and GPG keys` → `New SSH key`，粘贴公钥并保存。git remote set-url origin git@github.com:sam7xx/sam7xx.github.io.git# 关联远程仓库（替换为你的仓库地址）git push origin main #执行推送，如果不再提示认证失败，说明配置成功。 3.2 Cloudflare 创建 Pages 注册Cloudflare账号，登录后进入 Cloudflare Pages → 点击 Create a project → 关联你的 Git 仓库。 构建配置： 框架预设：没有Hexo选项，空着。 构建命令：npm install npm run build这里执行安装package.json里面的插件和命令。 输出目录：public 环境变量：NODE_VERSION=22控制nodejs版本与你构建一致 根目录：留空默认/ 3.3 部署与访问 点击 Save and Deploy，等待构建完成后，通过 Cloudflare 分配的域名（如 xxx.pages.dev）访问。 若你有自己的域名（如 blog.example.com），可绑定到 Cloudflare Pages，实现全球代理发送你的网站： 将域名解析到 Cloudflare， 在 Cloudflare 控制台 → Websites → 点击 Add a site，输入你的域名（如 example.com），按提示完成 DNS 解析配置（将域名服务器改为 Cloudflare 提供的服务器）。 在 Pages 项目中绑定域名，进入你的 Pages 项目 → Custom domains → Set up a custom domain → 输入子域名（如 blog.example.com）→ 点击 Add custom domain。Cloudflare 会自动添加 DNS 记录（CNAME 指向 项目名.pages.dev），并配置免费 SSL 证书（几分钟后生效）。 更新 Hexo 配置，为避免静态资源路径错误，需修改 Hexo 根目录的 _config.yml： url: https://blog.example.com # 改为你的自定义域名root: / # 保持默认 推送修改后，Cloudflare 会自动重新构建，确保资源路径正确。 4. 部署到 Netlify/Vercel 4.1 Netlify部署 这两个平台均支持自动构建部署，比Cloudflare简单，大概步骤类似，默认设置点点点搞定，目前Vercel作为备用站： 在 Netlify/Vercel 控制台导入 Hexo 源代码仓库。 配置构建参数 框架预设：hexo 构建命令：hexo generate 输出目录：public 部署 平台会自动安装依赖（npm install）并执行构建，完成后提供临时域名，支持绑定自定义域名。 4.2 集成 Vercel 分析工具 在 Hexo 中集成 Vercel 分析工具 @vercel/analytics 需要通过修改主题模板，将分析代码注入到所有页面中（因为 Hexo 是静态站点生成器，需确保代码被打包到最终生成的 HTML 里）。具体步骤如下： 步骤 1：安装依赖 在 Hexo 项目根目录（即 _config.yml 所在目录）执行以下命令，安装 @vercel/analytics： npm install @vercel/analytics --save 步骤 2：创建分析代码注入脚本 由于 Hexo 不直接支持在模板中导入 npm 包，需要先将 @vercel/analytics 的核心代码提取为可在浏览器中运行的脚本，再注入到页面中。 在 Hexo 项目的 source/js/ 目录下（如果没有 js 目录则创建），新建 vercel-analytics.js 文件，内容如下： // 从 @vercel/analytics 包中提取核心逻辑（适配浏览器环境）(function() const script = document.createElement(script); script.src = https://cdn.vercel-insights.com/v1/script.js; script.defer = true; // 替换为你的 Vercel 项目 ID（可选，不填则自动关联当前部署的项目） // script.dataset.project = 你的项目ID; document.head.appendChild(script);)(); 说明：这是 Vercel 官方提供的 CDN 方式，无需依赖本地 npm 包，更适合静态站点（比直接导入 npm 包更简单）。 步骤 3：修改主题模板，注入脚本 需要将上述脚本添加到所有页面的 head 或 body 中（推荐放在 head 底部，不阻塞页面渲染）。 找到你正在使用的 Hexo 主题的布局文件，通常在 themes/[你的主题名]/layout/ 目录下，常见的全局模板文件有： _partial/head.ejs（头部模板，所有页面都会加载） _partial/footer.ejs（底部模板） 以主流主题（如 Next、Stellar 等）为例，推荐修改 head.ejs： 编辑 themes/[你的主题名]/layout/_partial/head.ejs，在文件末尾添加以下代码（引入刚才创建的脚本）： !-- 引入 Vercel Analytics 脚本 --% if (!is_amp()) % !-- 非 AMP 页面才加载 -- script src=/js/vercel-analytics.js/script% % 说明： is_amp() 是 Hexo 的内置函数，用于排除 AMP 页面（避免冲突），如果你的主题不支持 AMP，可以直接写 script src=/js/vercel-analytics.js/script。 路径 /js/vercel-analytics.js 对应步骤 2 中创建的 source/js/vercel-analytics.js（Hexo 会将 source 目录下的文件直接复制到生成的静态文件中）。 步骤 4：构建并部署 本地测试是否生效： hexo clean hexo g hexo s 启动后访问 http://localhost:4000，打开浏览器开发者工具（F12）的「Network」面板，查看是否加载了 vercel-analytics.js 和 script.js（来自 Vercel CDN），若有则说明注入成功。 部署到 Vercel： 将代码提交到关联 Vercel 的 Git 仓库，Vercel 会自动构建部署： git add .git commit -m Add Vercel Analytics to Hexogit push origin main 步骤 5：验证数据 部署成功后，登录 Vercel 控制台，进入你的 Hexo 项目，左侧菜单点击「Analytics」，即可查看访问数据（通常有 5-10 分钟延迟）。 5. GitHub Actions 工作流配置 要实现一次代码推送后自动部署到 GitHub Pages、Vercel、Cloudflare Pages 三个平台，可通过 GitHub Actions 配置统一的工作流。以下是针对这三个平台的详细自动化部署方案： 5.1 准备 项目已托管在 GitHub 仓库（如 Hexo、Vue、React 等静态项目）。 已在三个平台完成基础配置： GitHub Pages：仓库开启 Pages 功能（目标分支设为 gh-pages）。 Vercel：导入 GitHub 仓库创建项目（无需手动部署，后续通过 Action 触发）。 Cloudflare Pages：通过 GitHub 关联仓库创建项目（构建命令和输出目录先暂填，后续通过 Action 覆盖）。 获取各平台的部署凭证（敏感信息，存储在 GitHub Secrets 中）： 平台 所需凭证 获取方式 GitHub Pages 个人访问令牌（PAT），需勾选 repo 和 workflow 权限 GitHub PAT 生成 Vercel Vercel 令牌（Token）+ 项目 ID+USER ID Vercel 控制台 → 账户设置 → Tokens；项目设置 → General 中获取项目 ID;菜单中找到 Account→ Genera→ USER ID Cloudflare Pages Cloudflare API 令牌 + 账户 ID + 项目名称 Cloudflare 控制台 → 我的个人资料 → API Tokens（创建含 Pages:Edit 权限的令牌）；账户 ID 在 Workers 和 Pages 页面获取；项目名称为 Cloudflare Pages 中创建的项目名 5.2 配置 GitHub Actions 进入 GitHub 仓库 → Settings → Secrets and variables → Actions → New repository secret，添加以下凭证： GH_TOKEN：GitHub Pages 的 PAT VERCEL_TOKEN：Vercel 令牌 VERCEL_ORG_ID：Vercel组织/用户ID VERCEL_PROJECT_ID：Vercel 项目 ID CF_API_TOKEN：Cloudflare API 令牌 CF_ACCOUNT_ID：Cloudflare 账户 ID CF_PROJECT_NAME：Cloudflare Pages 项目名称 创建工作流配置文件，在项目根目录创建 .github/workflows/deploy.yml，内容如下： 查看代码 deploy.yamlname: hexo部署流程on: push: branches: [ main ] workflow_dispatch:jobs: deploy: runs-on: ubuntu-latest timeout-minutes: 30 steps: - name: 拉取代码 uses: actions/checkout@v4 with: fetch-depth: 0 submodules: recursive - name: 检查是否忽略public目录（关键！） run: | echo ===== 检查.gitignore是否排除public ===== if grep -q public .gitignore; then echo ⚠️ 注意：.gitignore中包含public，会被忽略（正常现象） else echo ✅ .gitignore中未忽略public fi # 显示.gitignore内容 cat .gitignore || echo 无.gitignore文件 - name: 安装Node.js uses: actions/setup-node@v4 with: node-version: 22.19.0 cache: npm - name: 安装依赖 run: | npm install hexo-cli -g npm install --force npm install hexo-theme-stellar@latest --save # 确保主题被安装 cd themes/stellar npm install cd ../../ - name: 构建public并记录内容 run: | hexo clean echo ===== 开始构建public ===== hexo generate # 记录public目录详情（关键调试信息） echo ===== public目录状态 ===== if [ ! -d public ]; then echo ❌ public目录未生成！ exit 1 fi echo public目录路径：$(pwd)/public echo public目录大小：$(du -sh public) echo public目录文件列表（前20个）： ls -la public | head -n 20 echo public/index.html内容（前10行）： head -n 10 public/index.html || echo ❌ 无index.html # 新增步骤：设置带时间戳的环境变量 - name: 设置部署时间变量 run: | echo DEPLOY_TIMESTAMP=$(date +%Y-%m-%d %H:%M:%S) $GITHUB_ENV echo 已设置部署时间：$ env.DEPLOY_TIMESTAMP - name: 部署到gh-pages分支（带推送日志） uses: peaceiris/actions-gh-pages@v4 with: github_token: $ secrets.GH_TOKEN publish_dir: ./public # 确认推送的是public目录下的内容 publish_branch: gh-pages force_orphan: true keep_files: false enable_jekyll: false # 使用环境变量中的时间戳 commit_message: Deploy public content: $ env.DEPLOY_TIMESTAMP - name: 验证gh-pages分支内容 run: | echo ===== 克隆gh-pages分支验证 ===== git clone -b gh-pages https://github.com/$ github.repository gh-pages-check echo ===== gh-pages分支根目录内容 ===== ls -la gh-pages-check echo ===== 检查是否有index.html ===== if [ -f gh-pages-check/index.html ]; then echo ✅ gh-pages分支存在index.html，部署成功！ echo 访问地址：https://$ github.repository_owner .github.io/$ github.event.repository.name / else echo ❌ gh-pages分支无index.html，部署失败！ exit 1 fi 推送代码触发自动部署 # 提交工作流文件git add .github/workflows/deploy.ymlgit commit -m Add auto-deploy workflow to 3 platformsgit push origin main 也可以写入脚本deploy.sh，放在博客根目录，更新博客后终端执行./deploy.sh即可完成代码推送至Github。 查看代码 deploy.sh#!/bin/bashset -euo pipefail # 严格模式：遇错即停，防止未定义变量# ==============================================# 配置区（根据项目调整）# ==============================================REMOTE_BRANCH=main # 远程目标分支# ==============================================# 输出格式化函数（带颜色标识）info() echo -e \\033[34mℹ️ $1\\033[0m; success() echo -e \\033[32m✅ $1\\033[0m; warning() echo -e \\033[33m⚠️ $1\\033[0m; error() echo -e \\033[31m❌ $1\\033[0m exit 1; # 1. 检查项目是否有变更（任何文件的修改/新增/删除）check_project_changes() info 检查Hexo项目是否有变更... # 检查工作区和暂存区是否有变化（忽略.gitignore中的文件） if git diff --quiet --exit-code git diff --cached --quiet --exit-code; then warning 项目未检测到任何变更，无需提交推送 exit 0 fi# 2. 同步远程最新代码（避免推送冲突）sync_remote() info 同步远程$REMOTE_BRANCH分支最新代码... if ! git pull origin $REMOTE_BRANCH; then error 拉取远程代码冲突！请手动解决后再运行脚本： git pull origin $REMOTE_BRANCH fi# 3. 提交所有变更并推送commit_and_deploy() info 提交所有项目变更... # 添加所有变更（.gitignore会自动过滤不需要的文件） git add . || error 添加文件到暂存区失败 # 生成包含变更类型的提交信息 local change_count change_count=$(git status --porcelain | wc -l | tr -d ) # 统计变更文件数 local commit_msg=Hexo项目更新 ($change_count 个文件): $(date +%Y-%m-%d %H:%M:%S) git commit -m $commit_msg || error 提交失败（可能存在未解决的冲突） # 推送至远程，触发三平台部署 info 推送至远程$REMOTE_BRANCH分支，触发自动化部署... git push origin $REMOTE_BRANCH || error 推送失败（检查网络或权限） success 所有变更已推送！三平台自动化部署将自动触发# 主流程main() info ===== Hexo全项目自动部署工具 ===== check_project_changes sync_remote commit_and_deploy info ===================================main $@ $ ./deploy.shℹ️ ===== Hexo全项目自动部署工具 =====ℹ️ 检查Hexo项目是否有变更...ℹ️ 同步远程main分支最新代码...From github.com:xxxxx/xxxxx.github.io * branch main - FETCH_HEADAlready up to date.ℹ️ 提交所有项目变更...[main 62bbb8f] Hexo项目更新 (10 个文件): 2025-10-19 10:56:44 10 files changed, 865 insertions(+), 182 deletions(-) create mode 100644 db.json create mode 100644 themes/stellar/source/art-title.cssℹ️ 推送至远程main分支，触发自动化部署...Enumerating objects: 41, done.Counting objects: 100% (41/41), done.Delta compression using up to 16 threadsCompressing objects: 100% (20/20), done.Writing objects: 100% (22/22), 184.16 KiB | 416.00 KiB/s, done.Total 22 (delta 15), reused 0 (delta 0), pack-reused 0remote: Resolving deltas: 100% (15/15), completed with 15 local objects.To github.com:xxxxx/xxxxx.github.io.git 206a451..62bbb8f main - main✅ 所有变更已推送！三平台自动化部署将自动触发ℹ️ =================================== 查看部署状态 部署进度：GitHub 仓库 → Actions → 选择当前工作流 → 查看实时日志。 结果验证： GitHub Pages：访问 https://用户名.github.io/仓库名 Vercel：访问 Vercel 项目分配的域名（如 项目名.vercel.app） Cloudflare Pages：访问 Cloudflare 分配的域名（如 项目名.pages.dev） 部署失败排查： 查看 GitHub Actions 日志中的错误信息，常见问题： 凭证错误（Secrets 名称或值不正确） 构建命令失败（依赖安装错误，需检查 package.json） 静态文件目录错误（确保 publish_dir 与实际输出目录一致） 通过此配置，每次向 main 分支推送代码时，GitHub Actions 会自动完成构建并同步部署到三个平台，实现 “一次推送，多平台联动更新”。 5.3 常见问题与解决 部署后页面空白 / 样式丢失 原因：_config.yml 中 url 配置错误，或静态资源路径引用问题。 解决：确保 url 与实际域名一致（如 url: https://yourname.github.io），并执行 hexo clean 重新生成。 平台构建失败（提示缺少依赖） 原因：package.json 未提交到仓库，或依赖未正确声明。 解决：确保 package.json 和 package-lock.json 已提交，必要时在构建命令前加 npm install（如 npm install hexo generate）。 部署后 404 错误 原因：部署分支或输出目录配置错误。 解决：确认 GitHub Pages 指向的分支正确（如 main），或 Cloudflare/Netlify 的输出目录为 public。 Github 自动部署jekyll构建问题 原因：Github默认使用jekyll主题构建，识别到主题不是jekyll报错。 解决：可以生成一个.nojekyll文件来禁用jekyll部署，再工作流中增加public文件下.nojekyll 根目录也添加 .nojekyll（双重保险）,虽然工作流已在 public 目录生成 .nojekyll，但可在仓库根目录也添加一个，防止 GitHub 误读： # 本地仓库根目录执行touch .nojekyllgit add .nojekyllgit commit -m 根目录添加.nojekyll，禁用Jekyllgit push origin main 通过以上步骤，能从工作流配置、仓库设置、缓存清理三个层面彻底禁用 Jekyll，确保 GitHub Pages 直接托管 Hexo 生成的静态文件。核心逻辑是：确保 .nojekyll 被正确部署到 gh-pages 分支的根目录，且 GitHub 识别到该文件。 6. 笔记 本地 Git 仓库应跟踪 Hexo 源代码（_config.yml、source、themes 等），而非 public 目录（可在 .gitignore 中忽略）。 部署平台通过源代码自动构建生成 public 目录，避免手动上传静态文件。 定期备份配置 重要配置文件（_config.yml、主题配置 _config.stellar.yml 等）建议备份，避免误删。 绑定自定义域名 各平台均支持绑定自定义域名，需在域名解析平台添加对应的 DNS 记录（如 CNAME 指向平台提供的域名）。 自动部署配置（代码更新后自动同步） Cloudflare Pages 默认开启 自动部署：当你向关联的 Git 分支（如 main）推送新代码时，会自动触发构建并更新博客，无需手动操作。 验证自动部署： # 本地修改一篇文章或配置git add .git commit -m Update blog contentgit push origin main 推送后，在 Cloudflare Pages 控制台的 Deployments 页面会看到新的构建任务，完成后博客会自动更新。 通过以上步骤，可顺利将 Hexo 博客部署到主流平台。若遇到具体错误，可结合部署日志（如平台提供的构建日志）定位问题，重点检查配置文件和依赖是否正确。 7. 总结 以上几种部署 Hexo 的核心流程是：Git 仓库关联 → 配置构建参数 → 自动构建部署。其优势在于依托于Cloudflare Pages 免费、全球 CDN 加速、自动部署和简单的域名绑定。按上述步骤操作，即使是新手也能顺利完成部署，且国内访问速度优于 GitHub Pages。若遇到具体错误，可在 Cloudflare Pages 的 Deployments 页面查看详细日志，针对性解决即可。","tags":["hexo配置","hexo部署"],"categories":["博客搭建"]},{"title":"博客搭建hexo & stellar安装配置","path":"/博客搭建/blog/hexo&stellar主题配置/","content":"1. 构建工具安装准备 1.1 Node.js环境搭建 hexo基于Node.js构建,需安装Node.js依赖环境，由于ubuntu系统仓库Node.js比较旧，需前往Node.js官网按指引安装最新稳定版本。 由于本博主使用的是WSL子系统，这里选择Linux系统和nvm安装方式。 首先安装nvm Node.js版本管理器，再使用nvm工具包安装指定版本Node.js，Node.js自带npm软件包管理器，顺便安装yarn JavaScript软件包管理器。 具体操作如下： # Download and install nvm:curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash# in lieu of restarting the shell\\. $HOME/.nvm/nvm.sh# Download and install Node.js:nvm install 24# Verify the Node.js version:node -v # Should print v24.9.0.# Verify npm version:npm -v # Should print 11.6.0. 1.2 NPM简介 NPM（Node Package Manager） 是 Node.js 的默认包管理工具，用于管理 JavaScript 项目的依赖库和工具。它允许开发者轻松地安装、更新、共享和发布代码包，同时支持版本控制和脚本运行。 如果需要加速国内访问，可以配置淘宝镜像： npm config set registry https://registry.npmmirror.com 以下是一些常用的 NPM 命令： npm init # 初始化 package.json 文件npm install # 安装 package.json 中的所有依赖npm install 包名 --save-dev # 安装开发依赖npm uninstall 包名 # 卸载依赖npm update 包名 # 更新依赖npm list --depth=0 # 查看已安装的依赖npm audit # 检查依赖中的安全漏洞npm run 脚本名 # 运行 package.json 中定义的脚本 本地与全局安装 npm install express # 本地安装 将包安装到当前项目的 node_modules 目录，仅对该项目可用。npm install -g @vue/cli # 全局安装 使用 -g 参数将包安装到系统范围内，适用于 CLI 工具。 2. HEXO配置 2.1 hexo安装以及初始化 根据Hexo官网安装指引，全局安装npm install -g hexo@8.0.0 hexo init blog #初始化blog目录，目录一定为空。cd blognpm install #安装hexo所需依赖hexo clhexo ghexo s #清除缓存渲染网页启动本地端口服务http://localhost:4000/ #点击链接可用浏览器本地预览博客 初始化后blog文件夹结构如下. .├── _config.yml #hexo配置文件├── package.json├── scaffolds #模板文件夹├── source #资源文件夹，即网页根目录位置| ├── _drafts| └── _posts└── themes #主题文件夹 2.2 hexo配置 开始折腾 本站使用Stellar主题构建，Stellar 是一个内置文档系统的简约商务风 Hexo 主题，支持丰富的标签和动态数据组件，帮助您简单从容地应对各种表达需求，十分推荐内容创作者使用 Stellar 开始您全新的博客之旅。 https://sam7.top/%3Chttps:/xaoxuu.com/wiki/stellar%3Estellar主题文档 npm i hexo-theme-stellar安装稳定版本，安装路径位于blog/node_modules/文件夹内。 在 blog/_config.yml 文件中找到并修改： theme: stellar 将blog/node_modules/_config.yml 拷贝一份至/blog目录重命名为_config.stellar.yml，该配置文件优先级高于主题目录。 参阅Stellar wiki选择开启需要的功能。 3. 网站统计 网页底部文章统计参考博主BoBoBlog文章 安装插件：npm i hexo-wordcount –save 还需要需要在主题文件footer.ejs里将 post_count 和 word_count 替换为实际数据。Stellar 主题页脚渲染时，content 是字符串，可以用 JS 替换。 建议在ayoutDiv 函数里，渲染 markdown 前加如下替换： footer.ejs// footerel += div class=textif (content) const postCount = site.posts.length; const wordCount = typeof totalcount === function ? totalcount(site) : 0; let contentStr = content; contentStr = contentStr.replace(post_count, postCount).replace(word_count, wordCount); el += markdown(contentStr) 然后在主题配置文件footer:content:增加如下代码，即可实现显示网站总文章字数统计。 主题配置文件span class=totalcount共发表 post_count 篇Blog · /spanspan class=post-count总计 word_count 字/span 网页访问统计由于不蒜子老是挂，现在使用的是Vercount插件，不蒜子的优化版本。Vercount: 一个比不蒜子更好的网站计数器 | EvanNotFound’s Blog 显示效果修改内容需要修改主题配置文件，在footer：→ content：位置添加如下。内容 blog/_config.stellar.ymlcontent: | # 支持 Markdown 格式 center 网站由 [author.name](/) © 2025使用 [theme.name](theme.tree) 主题创建 span id=runtime_span/span script type=text/javascript function show_runtime() window.setTimeout(show_runtime(), 1000); X = new Date(2025/09/06 19:00:00); Y = new Date(); T = (Y.getTime() - X.getTime()); M = 24 * 60 * 60 * 1000; a = T / M; A = Math.floor(a); b = (a - A) * 24; B = Math.floor(b); c = (b - B) * 60; C = Math.floor((b - B) * 60); D = Math.floor((c - C) * 60); runtime_span.innerHTML = 网站已运行 + A + 天 + B + 小时 + C + 分 + D + 秒 show_runtime(); /script !--不蒜子计数器 https://ohevan.com/vercount-website-counter-busuanzi-alternative.html-- script defer src=https://vercount.one/js/script !--添加一个访问量-- 总访问span id=busuanzi_value_site_pv/span次 · 总访客span id=busuanzi_value_site_uv/span人 · 本页访问span id=busuanzi_value_page_pv/span次 span class=totalcount共发表 post_count 篇Blog · /spanspan class=post-count总计 word_count 字/span /center div style=display: flex;justify-content: center;align-items: center;margin: 10px; a target=_blank rel=noopener href=https://notbyai.fyi/img class=lazy entered loaded src=https://u.sam7.top/miGrfX data-src=https://u.sam7.top/miGrfX alt=全部都是博主用心学编写的啊！不是ai啊 style=width:100px;height:35px;margin-right: 10px id=notbyai data-ll-status=loaded/a a target=_blank rel=noopener href=https://creativecommons.org/licenses/by-nc-sa/4.0/img class=lazy entered loaded src=https://u.sam7.top/2BJDeW data-src=https://u.sam7.top/2BJDeW alt=只要保留原作者姓名并在基于原作创作的新作品适用同类型的许可协议，即可基于非商业目的对原作重新编排、改编或者再创作。 style=width:100px;height:35px data-ll-status=loaded/a /div 4. 评论系统 4.1 waline启用 stellar已集成waline插件，首先主题配置文件选择启用waline，具体配置见以下代码。 然后跟着主页快速上手 | Waline wiki一步步搭建到vercel。 SkyReeves博主写的很详细，参考hexo博客引入Waline评论模块 - SkyReeves 查看代码 主题配置文件comments: service: waline # beaudar, utterances, giscus, twikoo, waline, artalk comment_title: 快来参与讨论吧~ lazyload: true # true / false custom_css: waline # artalk,twikoo,... 可以为没有全局启用的评论加载自定义样式 waline: js: https://unpkg.com/@waline/client@v3/dist/waline.js #https://gcore.jsdelivr.net/npm/@waline/client@3.1/dist/waline.js css: https://unpkg.com/@waline/client@v3/dist/waline.css #https://gcore.jsdelivr.net/npm/@waline/client@3.1/dist/waline.css meta_css: https://unpkg.com/@waline/client@v3/dist/waline-meta.css #https://gcore.jsdelivr.net/npm/@waline/client@3.1/dist/waline-meta.css # Waline server address url, you should set this to your own link serverURL: # If false, comment count will only be displayed in post page, not in home page commentCount: true # Pageviews count, Note: You should not enable both `waline.pageview` and `leancloud_visitors`. pageview: false locale: # #自定义反应标题。如果像我一样不想要反应标题，可以在这一项里留空。 # reactionTitle: # #反应表情的文章描述 # reaction0: 爱你哟 # reaction1: oh~~ # reaction2: 嘚瑟~ # reaction3: 无语 placeholder: 嗨，朋友，留个脚印再走呗。 #反应表情组 reaction: - https://img.skyreeves.com/emojis/blobs/ablobcatheart.png - https://img.skyreeves.com/emojis/blobs/ablobcatattentionreverse.png - https://img.skyreeves.com/emojis/blobs/ablobcatrainbow.png - https://img.skyreeves.com/emojis/blobs/blobcatsaitama.png - https://img.skyreeves.com/emojis/blobs/blobcatflip.png # Custom emoji emoji: - https://unpkg.com/@waline/emojis@1.1.0/weibo - https://unpkg.com/@waline/emojis@1.1.0/alus - https://unpkg.com/@waline/emojis@1.1.0/bilibili - https://unpkg.com/@waline/emojis@1.1.0/qq - https://unpkg.com/@waline/emojis@1.1.0/tieba - https://unpkg.com/@waline/emojis@1.1.0/tw-emoji - https://unpkg.com/@waline/emojis@1.1.0/bmoji 4.2 评论框颜色跟随 启用后会发现，评论区域部分元素无法显示，需要修改waline.styl文件，调整颜色对比度。 设置失效原因修改后stylus文件为 .wl-panel 强制设置 background: var(--waline-bgcolor) !important，这样评论框会跟随主题背景色切换。重新编译并刷新页面验证效果。waline.styl.wl-panel background: var(--waline-bgcolor) !important;.cmt-body .wl-panel margin: 0.5em 0 !important; .wl-meta-head padding: 0 !important; --waline-font-size: 0.9375rem; /* 浅色模式 - 增强工具栏对比度 */ --waline-white: #ffffff; --waline-light-grey: #2c0e0eff; /* 加深浅灰色，提升文字可读性 */ --waline-dark-grey: #333333; /* 加深深灰色，增强与背景对比 */ /* 主题色强化 - 使工具栏按钮更突出 */ --waline-theme-color: #1859bbff; /* 稍深的主题色，增强按钮识别度 */ --waline-active-color: #5d932b; /* 更鲜明的活跃色，突出点击状态 */ /* 布局颜色 - 增强工具栏区域区分 */ --waline-color: #188dd1ff; --waline-bgcolor: #ffffff; --waline-bgcolor-light: #f5f5f5; /* 稍深的浅色背景，使工具栏区域更明显 */ --waline-bgcolor-hover: #e0e0e0; /* 加深悬停背景，提升交互反馈 */ --waline-border-color: #cccccc; /* 稍深的边框，使工具栏元素边界更清晰 */ --waline-disable-bgcolor: #f0f0f0; --waline-disable-color: #888888; /* 禁用状态颜色加深，明确不可用状态 */ --waline-code-bgcolor: #adaaaaff; /* 代码工具栏背景调整 */ /* 特殊颜色 */ --waline-bq-color: #f0f0f0; /* 头像 */ --waline-avatar-size: 3.25rem; --waline-m-avatar-size: calc(var(--waline-avatar-size) * 9 / 13); /* 徽章 - 增强工具栏内徽章对比度 */ --waline-badge-color: #2980b9; /* 稍深的徽章色，更易识别 */ --waline-badge-font-size: 0.725em; /* 信息区域 - 工具栏辅助信息更清晰 */ --waline-info-bgcolor: #f5f5f5; --waline-info-color: #555555; /* 信息文字加深 */ --waline-info-font-size: 0.725em; /* 渲染选择 - 强化工具栏元素边框 */ --waline-border: 1px solid var(--waline-border-color); --waline-avatar-radius: 50%; --waline-box-shadow: 0 1px 4px rgba(0,0,0,0.15); /* 稍强阴影，突出工具栏区域 */ /* 工具栏特定元素强化 */ .wl-toolbar border-bottom: 1px solid #e0e0e0; /* 工具栏底部边框加深 */ padding: 0.5em 0; background-color: #fafafa; /* 工具栏背景与主区域区分 */ /* 工具栏按钮增强 */ .wl-toolbar button color: #555555 !important; /* 按钮图标颜色加深 */ padding: 0.3em 0.6em; .wl-toolbar button:hover background-color: #e8e8e8 !important; /* 悬停背景更明显 */ color: #222222 !important; /* 悬停时图标颜色加深 */ /* 输入框强化 */ .wl-editor border: 1px solid #dddddd !important; box-shadow: inset 0 1px 3px rgba(0,0,0,0.05) !important; /* 内阴影增强输入框边界感 */ .cmt-body.waline ondark() /* 深色模式增强对比度设置 */ --waline-white: #0a0a0a; --waline-light-grey: #b0b0b0; /* 明显提亮的浅灰色 */ --waline-dark-grey: #e0e0e0; /* 接近白色的深灰色，提升文字可读性 */ /* 布局颜色 - 更大的明暗差异 */ --waline-color: #f0f0f0; /* 极亮的文字颜色 */ --waline-bgcolor: var(--block, #121212); /* 更深的主背景 */ --waline-bgcolor-light: #222222; /* 明显浅于主背景的次级背景 */ --waline-bgcolor-hover: #2C3E50; /* 悬停状态明显区分 */ --waline-border-color: #383838; /* 更粗的视觉边框效果 */ --waline-disable-bgcolor: #333333; --waline-disable-color: #999999; /* 禁用状态与可用状态明显区分 */ --waline-code-bgcolor: #050810; /* 代码块背景与主背景区分 */ /* 特殊颜色 - 增强区块感 */ --waline-bq-color: #252525; /* 引用区块明显区分 */ /* 主题色 - 在深色背景上更突出 */ --waline-theme-color: #2983beff; --waline-active-color: #7dd147; /* 更鲜艳的活跃色 */ --waline-badge-color: #4da6ff; /* 徽章颜色更明亮 */ /* 信息区域 - 增强区分度 */ --waline-info-bgcolor: #222222; --waline-info-color: #cccccc; /* 信息文字更亮 */ /* 强化边框和阴影效果 */ --waline-border: 1px solid var(--waline-border-color); --waline-box-shadow: 0 2px 8px rgba(0,0,0,0.3); /* 更深的阴影增强层次感 */ /* 计数元素特别强化 */ .wl-count padding: .375em; font-weight: bold; font-size: 1.25em; color: #ffffff; background-color: #1C1F21; border-radius: 4px; /* 评论项之间添加分隔线增强区分 */ .wl-item border-bottom: 1px solid var(--waline-border-color); padding: 1em 0; /* 输入框强化 */ .wl-editor background-color: #050810 !important; border: 1px solid #383838 !important; color: #f0f0f0 !important; :root[data-theme=dark] ondark(); :root:not([data-theme]) @media (prefers-color-scheme: dark) ondark(); /* 修复浅色模式下评论标题显示白色的问题 *//* 1. 基础覆盖：直接指定 .cmt-title 文本颜色 */.header.cmt-title color: #333333 !important; /* 浅色模式默认深色文本，与白色背景强对比 *//* 2. 精准适配：结合 data-theme=light 确保只作用于浅色模式 */:root[data-theme=light] .header.cmt-title color: #222222 !important; /* 浅色模式下强制深色标题 */ opacity: 1 !important; /* 避免被其他样式设置透明 *//* 3. 兜底：防止标题内的 p 标签继承白色 */:root[data-theme=light] .header.cmt-title p color: inherit !important; /* 继承父级的深色，而非白色 */ margin: 0; /* 可选：修复可能的默认边距问题 *//* 4. 深色模式兼容（避免影响深色模式） */:root[data-theme=dark] .header.cmt-title color: #ffffff !important; /* 深色模式保持白色标题，确保正常显示 */ 5. 面包屑文章字数统计 主题布局文件article_banner.ejs中添加如下代码，即可实现功能。 代码折叠 article_banner.ejs%var banner = if (page.banner) banner.url = page.banner else if (theme.topic.tree[page.topic]?.banner != null) banner.url = theme.topic.tree[page.topic]?.banner else if (theme.wiki.tree[page.wiki]?.banner != null) banner.url = theme.wiki.tree[page.wiki]?.bannerbanner = Object.assign(banner, page.banner_info)// 标题if (banner.title == null) banner.title = page.h1 != null ? page.h1 : page.title// 副标题if (banner.subtitle == null) banner.subtitle = page.subtitle// 生成日期信息（确保更新时间常显）function layoutDateInfo() const publishTime = page.date ? page.date.format(YYYY-MM-DD) : 未知时间; // 无论是否更新都显示更新时间 const updateTime = page.updated ? page.updated.format(YYYY-MM-DD) : publishTime; // 使用4个非换行空格分隔（nbsp;） return `span class=publish-time发布时间：$publishTime/spannbsp;nbsp;nbsp;nbsp; span class=update-time更新时间：$updateTime/span`;function layoutBreadcrumb() if (page.breadcrumb === false) return `div class=top/div` // 使用hexo-wordcount计算文章元信息 let metaInfo = if (page.layout == post page.content) // 调用hexo-wordcount提供的函数 const wordCount = wordcount(page.content); const readTime = min2read(page.content); // 使用4个非换行空格分隔（nbsp;） metaInfo = ` div class=breadcrumb-meta text-sm 文章字数：$wordCountnbsp;nbsp;nbsp;nbsp;阅读时长：$readTime分钟 /div `; // 构建面包屑导航（三行左对齐布局） let el = el += `div class=top bread-nav footnote` el += `div class=left breadcrumb-container` // 第一行：面包屑导航（左对齐） el += `div class=flex-row breadcrumb-path text-sm id=breadcrumb style=text-align: left;` el += `a class=cap breadcrumb href=$pretty_url(config.root)$__(btn.home)/a` if (theme.wiki.tree[page.wiki]) el += partial(breadcrumb/wiki) else if (page.notebook) el += partial(breadcrumb/note) else if (page.layout == post) el += partial(breadcrumb/blog) else el += partial(breadcrumb/page) el += `/div` // 第二行：文章元信息（左对齐） el += metaInfo ? `div style=text-align: left; padding: 4px 0;$metaInfo/div` : // 第三行：日期信息（左对齐，更新时间常显） el += `div class=breadcrumb-date text-sm style=text-align: left; padding: 4px 0;` el += layoutDateInfo() el += `/div` el += `/div` // 关闭.left el += `/div` // 关闭.top return elfunction layoutTitle() if (banner.title?.length 0) return `h1 class=text titlespan$banner.title/span/h1` else return function layoutSubtitle() if (banner.subtitle?.length 0) return `div class=text subtitle$banner.subtitle/div` else return function layoutIcon() if (banner.avatar?.length 0 || banner.icon?.length 0) return `img class=lazy avatar data-src=$banner.avatar || banner.icon` else return function layoutBottom() const el_icon = layoutIcon() const el_title = layoutTitle() const el_subtitle = layoutSubtitle() let cls = if (el_title.length 0 el_subtitle.length == 0) cls += only-title if (el_title.length 0) return ` div class=bottom$cls $el_icon div class=text-area $el_title $el_subtitle /div /div ` else return `` function layoutDiv() const bottom = layoutBottom() if (page.breadcrumb === false bottom.length == 0) return `` const top = layoutBreadcrumb() let style = `` let el = `` el += `div class=article banner$scrollreveal( ) top` if (banner.url?.length 0) el += `img class=lazy bg data-src=$banner.url` if (banner.color) style += style=--text-banner: + banner.color + el += ` div class=content$style $top $bottom /div ` el += `/div` return el%%- layoutDiv() % 6. 动态图标配置 在主题配置文件_config.stellar.yml中增加以下CSS文件，引入font-awesome图标库。在font-awesome v7 CDN里面找一个CDN。 # 动态图标引入inject: head: - link href=https://cdn.bootcdn.net/ajax/libs/font-awesome/7.0.0/css/all.css rel=stylesheet # fontawesome动态图标引入 图标格式张这样i class=fa-solid fa-github fa-brands fa-bounce/i，然后就可以在想要添加图标的地方使用了，Font Awesome主页搜索相应特性的图标，大部分都是免费的。 footer: social: github: icon: i class=fa-solid fa-github fa-brands fa-bounce/i title: Github url : / 7. 图床、图片配置 ImgToLink+是一款免费、免登录图床软件，支持单个文件50M，返回短链。 16图床，永久免费，无需登录的图床免费的往往很容易挂掉，用作评论区上传图床临时用可以。 Cloudflare好像也有免费的image服务。 7.1 Piclist Github图床配置 由于typora支持picgo和piclist图床上传，所以选用了目前还在持续更新的piclist。 typora图片设置如下，插入图片时直接上传piclist图床，然后自动转义图片url。 PicList主页下载安装最新版，选择Github图床搭建，参考PicGo/PicList + Github 搭建图床 | Theo Docs piclist相关设置 piclist设置图片最大800px宽度，大于800压缩至800，小于800不处理。 使用https://cdn.jsdmirror.com/gh加速Github图床。 上传成功直接复制url链接 开启时间戳重命名 添加图片水印 使用短链接 图片格式转换成压缩率更高的AVIF格式 7.2 搭建图床短链接 为什么要用短链，部分平台（尤其是社交平台、论坛、旧版编辑器）对 URL 长度或格式有严格限制，包含特殊字符（如 ? /）的长链接，可能被平台误判为 “恶意链接” 而拦截，且原始图床链接可能泄露敏感信息。 piclist上传的图片链接也是一堆乱码，widowns文件系统目录\\被转义，可以按时间戳重命名图像名称，也可以搭建短链接网站。 参考xyTom/Url-Shorten-Worker 主页wiki和用cloudflare搭建短链接网站搭建。 7.3 waline评论图床上传 开启waline评论区图床上传，图片能上传成功，但是的识别不了链接。 已经关掉了，PicList回传的不是json，只能选择URL、markdown格式。 7.4 fancybox设置 stellar集成fancybox灯箱插件，可以在放大网页上面的图片，功能很多。 Stellar：表达类标签组件（33+个） - XAOXUU stellar wiki介绍很详细。 md语法图片格式支持默认全局打开，有个问题就是点击文章海报图片也会放大。 主题配置文件plugins: fancybox: enable: true loader: /js/plugins/fancybox-loader.js js: https://gcore.jsdelivr.net/npm/@fancyapps/ui@6/dist/fancybox/fancybox.umd.js css: https://gcore.jsdelivr.net/npm/@fancyapps/ui@6/dist/fancybox/fancybox.css # 让 md 语法图片支持放大可以这样写: .md-text img:not([class]), .md-text .image img # 可以处理评论区的图片（不支持 iframe 类评论系统）例如： # 使用 twikoo 评论可以写: .tk-content img:not([class*=emo]) # 使用 waline 评论可以写: #waline_container .vcontent img selector: .timenode pimg, waline_container .vcontent img, .custom-image-container a, .md-text img:not([class]), .md-text .image img # 多个选择器用英文逗号隔开 8. 侧边栏配置 8.1 左侧栏页脚图标 stellar主题预留有7个位置，主题配置如下，footer下面添加以下内容。 主题配置文件######## Footer ########footer: social: github: icon: i class=fa-solid fa-github fa-brands style=font-size:1em;/i title: Github url : https://github.com/sam7xx rss: icon: i class=fa-solid fa-rss style=color: #FF5722;font-size:1em;/i title: RSS url : /atom.xml email: icon: i class=fa-solid fa-envelope fa-bounce style=color: #B197FC;font-size:1em;/i title: Email url : mailto://2690640537@qq.com theme: icon: i class=fa-solid fa-circle-half-stroke fa-flip style=color: #FFD600;font-size:1em;/i title: 主题切换 url: javascript:void(0); message: icon: i class=fa-solid fa-message fa-bounce style=color:#FF9800;font-size:1em;/i title: 留言板 url: /messages about: icon: i class=fa-solid fa-user style=color:#4CAF50;font-size:1em;/i title: 关于作者 url: /about friends: icon: i class=fa-solid fa-link style=color:#2196F3;font-size:1em;/i title: 友链 url: /friends 8.2 侧边栏组件 参考主题wiki配置Stellar：侧边栏组件的配置与使用（9个） - XAOXUU 可以根据需要添加或者自定义喜欢的组件。使用Hexo和Stellar搭建个人博客网站【超详细贴心保姆级教程💖】 - BoBoBlog 在 _data/widgets.yml 文件中添加以下内容，需要自己创建： _data/widgets.yml# 欢迎语welcome: layout: markdown title: 🎉欢迎 content: | 本站托管于Cloudflare, 加载缓慢请耐心等待，欢迎大家畅所欲言。 hr style=border: 1px solid black; background-color: black; span id=jinrishici-sentence/span script src=https://sdk.jinrishici.com/v2/browser/jinrishici.js charset=utf-8/script 修改主题配置文件，在想要显示的页面添加welcome组件， 主题配置文件home: leftbar: welcome, recent, music rightbar: tagcloud# 博客列表页配置index_blog: base_dir: blog # 只影响自动生成的页面路径 menu_id: post # 未在 front-matter 中指定 menu_id 时，layout 为 post 的页面默认使用这里配置的 menu_id leftbar: welcome, recent # for categories/tags/archives rightbar: tagcloud nav_tabs: # 近期发布 分类 标签 专栏 归档 and ... # 朋友文章: /friends/rss/# 博客专栏列表页配置 9. 主导航栏配置 9.1 启用主导航栏菜单 主题配置文件中设置如下，使用fontawesome图标。 主题配置文件menubar: columns: 5 # 一行多少个 items: # 可按照自己需求增加，符合以下格式即可 # id: 页面中高亮的 menu_id # theme: 高亮时的颜色，仅 svg 中 fill=currentColor 时有效 # icon: 支持 svg/img 标签，可以定义在 icons.yml 文件中，也支持外部图片的 URL # title: 标题 # url: 点击跳转到哪，支持相对路径和绝对路径 - id: post theme: #2196F3 icon: i class=fa-solid fa-newspaper style=font-size:1.25em;/i title: 博客 url: /blog - id: note theme: #4CAF50 icon: i class=fa-solid fa-pen-to-square style=font-size:1.25em;/i title: 笔记 url: /note 效果展示 9.2 主导航栏下拉菜单设置 菜单栏位置不够放怎么办，那就增加一个下拉菜单吧。在 Hexo 主题（这里是 Stellar 主题）的菜单栏 “更多” 处增加下拉菜单，可按以下步骤操作： 调整内容主题配置文件步骤一：修改主题配置文件（_config.yml）找到主题配置文件中 menubar 部分关于 “更多”（id: more）的配置项。 在 items 里，为 “更多” 添加子菜单结构。 这里通过 nested 字段来定义 “更多” 的下拉子菜单，每个子项包含 title（子菜单标题）和 url（子菜单跳转链接）。主题配置文件menubar: columns: 5 items: # 其他菜单项... - id: more theme: #CC96F3 icon: i class=fa-solid fa-caret-down style=font-size:1.5em;/i title: 更多 # 这里配置子菜单，使用 nested 字段 nested: - title: 子菜单1 url: /submenu1/ - title: 子菜单2 url: /submenu2/ - title: 子菜单3 url: /submenu3/ 调整内容menu.ejs步骤二：修改主题模板文件（菜单渲染相关） Hexo 主题的菜单渲染通常在 layout 目录下的相关模板文件 menu.ejs中，为 “更多” 菜单项添加下拉菜单的渲染逻辑。 这段代码的作用是：当菜单项（这里是 “更多”）存在 nested 子菜单配置时，渲染下拉菜单结构；否则渲染普通链接。查看代码 menu.ejs%function layoutDiv() var el = el += `nav class=menu dis-select$where == main ? mobile-hidden : ` // 分离普通菜单项和更多菜单项 const moreItem = (theme.menubar.items || []).find(item = item?.id === more); const regularItems = (theme.menubar.items || []).filter(item = item item.id != null item.url != null item.id !== more ); // 渲染普通菜单项 for (let item of regularItems) el += `a class=nav-item$item.id == page.menu_id ? active : title=$item.title href=$pretty_url(item.url)` if (item.theme?.length 0) el += ` style=color:$item.theme` el += `` if (item.icon?.length 0) el += icon(item.icon, no-lazy) else el += `span$__(item.title)/span` el += `/a` // 渲染更多菜单项及下拉菜单 if (moreItem) // 检查是否有子菜单配置 const hasSubmenu = moreItem.nested moreItem.nested.length 0; el += `div class=nav-item more-dropdown$moreItem.id == page.menu_id ? active : `; if (moreItem.theme?.length 0) el += ` style=color:$moreItem.theme`; el += ``; // 更多按钮 el += `a class=more-toggle title=$moreItem.title`; if (!hasSubmenu) el += ` href=$pretty_url(moreItem.url)`; el += ``; if (moreItem.icon?.length 0) el += icon(moreItem.icon, no-lazy); else el += `span$__(moreItem.title)/span`; el += `/a`; // 下拉菜单 if (hasSubmenu) el += `div class=more-dropdown-menu`; for (let subItem of moreItem.nested) if (subItem subItem.title subItem.url) el += `a class=dropdown-item href=$pretty_url(subItem.url) title=$subItem.title`; el += `span$__(subItem.title)/span`; el += `/a`; el += `/div`; el += `/div`; el += `/nav` return el%%- layoutDiv() % 调整内容menu.styl步骤三：添加样式 如果需要对下拉菜单的样式（如显示 / 隐藏、 hover 效果等）进行自定义，可在主题的样式文件menu.styl中添加相关 CSS 规则。示例：查看代码 menu.styl// 导航区域菜单容器样式.nav-area .menu width: 100% // 宽度占满父容器 display: grid // 使用网格布局 margin: 8px 0 // 上下外边距8px，左右0 grid-template-columns: repeat(hexo-config(menubar.columns), 1fr) // 从Hexo配置读取列数 grid-gap: 8px // 网格项间距8px // 导航区域菜单滚动条（隐藏） ::-webkit-scrollbar display: none // 隐藏滚动条本体 ::-webkit-scrollbar-track-piece background: transparent // 滚动条轨道透明 ::-webkit-scrollbar-thumb display: none // 隐藏滚动条滑块 // 导航区域菜单项样式 .nav-item box-sizing: border-box // 边框盒模型（padding和border不影响宽度） width: 100% // 宽度100% min-height: 40px // 最小高度40px border-radius: var(--border-bar) // 使用圆角变量 font-size: var(--fs-15) // 15px字体变量 font-weight: 500 // 中等粗细 color: var(--text-p3) // 三级文字色 text-align: center // 文字居中 background: var(--bg-a50) // 50%透明度背景 transition: background 0.3s ease // 背景过渡动画 position: relative // 相对定位 display: flex // Flex布局 flex-direction: column // 子元素垂直排列 align-items: center // 水平居中 justify-content: center // 垂直居中 // 导航项文字样式 span text-overflow: ellipsis // 溢出显示省略号 word-break: keep-all // 不拆分单词 // 激活/悬停状态 .active, :hover color: var(--text-p1) // 一级文字色 background: var(--bg-a100) // 100%透明度背景 // 激活状态底部指示条 .active:after content: // 空内容伪元素 position: absolute // 绝对定位 width: 16px // 宽度16px height: 2px // 高度2px left: 50% // 水平居中 transform: translateX(-50%) // 水平居中偏移 border-radius: 2px // 圆角2px bottom: 2px // 距离底部2px background: currentColor // 继承文字颜色// 基础菜单样式.menu display: flex // Flex布局（横向排列） list-style: none // 移除列表默认样式 padding: 0 // 无内边距 margin: 0 // 无外边距 gap: 1rem // 菜单项间距1rem// 通用导航项样式.nav-item display: flex // Flex布局 align-items: center // 垂直居中 justify-content: center // 水平居中 text-decoration: none // 无下划线 position: relative // 相对定位（用于下拉菜单）// 更多菜单下拉容器.more-dropdown position: relative // 相对定位 display: inline-block // 行内块布局 z-index: 100 // 层级100 // 更多下拉菜单样式（恢复原始宽度40px） .more-dropdown-menu display: none // 默认隐藏 position: absolute // 绝对定位 right: 0 // 右对齐 top: -80px // 上移80px background-color: #fff // 亮色背景 min-width: 40px // 恢复原始最小宽度（适配紧凑布局） max-height: 120px // 最大高度 box-shadow: 0 2px 12px rgba(0,0,0,0.15) // 亮色阴影 z-index: 9999 // 高层级避免遮挡 border-radius: 6px // 圆角6px overflow-y: auto // 垂直滚动 overflow-x: hidden // 水平隐藏溢出 padding: 6px 0 // 上下内边距6px box-sizing: border-box // 边框盒模型 // 更多下拉菜单滚动条 ::-webkit-scrollbar width: 4px // 滚动条宽度4px ::-webkit-scrollbar-thumb background-color: rgba(0,0,0,0.15) // 亮色滚动条滑块 border-radius: 2px // 滑块圆角 // 悬停显示更多下拉菜单 :hover .more-dropdown-menu display: block // 显示菜单 animation: fadeIn 0.2s ease // 淡入动画// 下拉菜单项样式.dropdown-item display: flex // Flex布局 align-items: center // 垂直居中 justify-content: center // 水平居中 width: 100% // 宽度100% padding: 10px // 内边距10px color: #333 // 亮色文字 text-decoration: none // 无下划线 box-sizing: border-box // 边框盒模型 // 悬停效果（亮色） :hover background-color: #f5f5f5 // 亮色悬停背景// 普通下拉菜单容器.dropdown position: relative // 相对定位 display: inline-block // 行内块布局 z-index: 100 // 层级100 // 普通下拉菜单样式（恢复原始宽度40px） .dropdown-menu display: none // 默认隐藏 position: absolute // 绝对定位 top: -80px // 上移80px background-color: #f9f9f9 // 亮色背景 min-width: 40px // 恢复原始最小宽度（适配紧凑布局） max-height: 120px // 最大高度 box-shadow: 0 2px 12px rgba(0,0,0,0.2) // 亮色阴影 z-index: 9999 // 高层级避免遮挡 overflow-y: auto // 垂直滚动 overflow-x: hidden // 水平隐藏溢出 padding: 6px 0 // 上下内边距6px box-sizing: border-box // 边框盒模型 // 普通下拉菜单滚动条 ::-webkit-scrollbar width: 4px // 滚动条宽度4px ::-webkit-scrollbar-thumb background-color: rgba(0,0,0,0.15) // 亮色滚动条滑块 border-radius: 2px // 滑块圆角 // 悬停显示普通下拉菜单 :hover .dropdown-menu display: block // 显示菜单 animation: fadeIn 0.2s ease // 淡入动画 // 普通下拉菜单项样式 .dropdown-menu a display: flex // Flex布局 align-items: center // 垂直居中 justify-content: center // 水平居中 padding: 10px // 内边距10px text-decoration: none // 无下划线 color: #333 // 亮色文字 // 悬停效果（亮色） :hover background-color: #ddd // 亮色悬停背景// 暗色模式适配[data-theme=dark] // 更多下拉菜单 .more-dropdown-menu background-color: #2d2d2d // 暗色背景 box-shadow: 0 2px 12px rgba(0,0,0,0.3) // 暗色阴影 // 下拉菜单项文字及悬停 .dropdown-item color: #f0f0f0 // 暗色文字 :hover background-color: #444 // 暗色悬停背景 // 普通下拉菜单 .dropdown-menu background-color: #2d2d2d // 暗色背景 box-shadow: 0 2px 12px rgba(0,0,0,0.3) // 暗色阴影 // 普通下拉菜单项文字及悬停 a color: #f0f0f0 // 暗色文字 :hover background-color: #444 // 暗色悬停背景 // 暗色模式滚动条滑块 .more-dropdown-menu::-webkit-scrollbar-thumb, .dropdown-menu::-webkit-scrollbar-thumb background-color: rgba(255,255,255,0.2) // 暗色滚动条滑块// 下拉菜单入场动画@keyframes fadeIn from opacity: 0 // 初始透明度0 transform: translateY(5px) // 初始位置下移5px to opacity: 1 // 结束透明度1 transform: translateY(0) // 恢复位置// 响应式调整（≤768px）@media (max-width: 768px) .menu.mobile-hidden display: none // 小屏幕隐藏指定菜单 步骤四：重启 Hexo 服务 修改完成后，在终端中执行 hexo clean hexo s 命令，清理并重新启动 Hexo 本地服务，然后在浏览器中查看效果，“更多” 处应能正常显示下拉菜单。 由于搜索栏遮盖了下拉菜单，需要修改下拉菜单支持滚动模式，容器固定3行高度，上移一段距离。 图标也不能正常显示，凑合用吧。 9.3 网站设置 根目录配置文件中，修改以下内容。 根目录配置文件title: #博客名称subtitle: 纸上得来终觉浅,绝知此事需躬行|文本2 #鼠标移至副标题区域即可显示文本2内容description: 博客描述keywords: [,,,,,] #关键词，方便搜索引擎抓取author: Sam #作者名字avatar: /path/x.avif #头像language: - zh-CN - entimezone: Asia/Shanghai #时区 网站标题艺术字设置 在主题source目录下新建art-title.css,新增以下内容 art-title.cssdiv.main /* 中英文统一手写字体（保持风格一致） */ font-family: Ma Shan Zheng, Pacifico, cursive !important; font-size: 36px !important; font-weight: normal !important; line-height: 1.3 !important; /* 红色到紫色渐变（主色调调整） */ background: linear-gradient(135deg, #ff6b6b, #4ecdc4, #8e44ad, #f39c12) !important; background-size: 70% 70% !important; /* 适配渐变流动动画 */ -webkit-background-clip: text !important; background-clip: text !important; color: transparent !important; /* 核心：文字透明显示渐变 */ /* 阴影增强层次感 */ text-shadow: 0 2px 5px rgba(0,0,0,0.15) !important; /* 渐变流动动画 */ animation: gradientShift 7s ease infinite !important; display: inline-block !important;/* 动画关键帧 */@keyframes gradientShift 0% background-position: 0% 50%; 50% background-position: 100% 50%; 100% background-position: 0% 50%; /* 悬停强化效果 */div.main:hover text-shadow: 0 3px 8px rgba(0,0,0,0.2) !important; transform: scale(1.05) !important; transition: all 0.3s ease !important; 然后在根目录配置文件增加以下内容，将中英文手写字体和art-title.CSS引入head标签内。 根目录配置文件inject: head: - link rel=stylesheet href=/art-title.css # 自定义艺术字样式引入 - link rel=stylesheet href=https://fonts.loli.net/css2?family=Ma+Shan+Zhengfamily=Pacificodisplay=swap #引入Pacifico字体 中英文手写 9.4 网页小图标 让豆包生成一个logo图标，修改为成128x128px，像素小加载快。 然后在根目录配置文件增加以下内容，将Favicon图标引入head标签内。 根目录配置文件inject: head: - link rel=icon href=https://u.sam7.top/6QcmtF type=image/avif # Favicon图标引入 效果展示 10. 顶部导航栏显示异常 浏览器设置浅色模式，主题切换为深色，顶部导航栏字体看起来比较奇怪，navbra.styl修改，.navbar-blur取消模糊效果。 navbar.styl// 顶栏容器样式（替代newblur()的背景）.navbar-blur margin: 0 1rem border-radius: 64px position: relative // 新增背景样式：使用主题卡片色+轻微透明度，不依赖模糊 background: var(--card, rgba(255, 255, 255, 0.9)) // 主背景（优先用主题变量） border: var(--card-border, 1px solid rgba(0, 0, 0, 0.05)) // 边框（可选，增强轮廓） box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05) // 轻微阴影，区分层级 // 如需半透明效果可调整alpha值，如：background: rgba(255, 255, 255, 0.85) 11. 页面布局调整 在主题样式custom.styl中添加$leftbar-bottom-margin = 20px）,调整主内容界面宽度为1080px，侧边栏宽度最大为277px，元素内部和外部距离都调整为15px。 custom.styl$leftbar-bottom-margin = 20px // 左侧栏底部距离（根据需求调整，单位px/rem）// 可以动态变化的属性:root --width-main: 1080px // 主内容区域宽度（默认1080px） --fsp: $fs-body // 段落字体大小（关联正文基础大小） --fsh2: calc(%s + 11px) % var(--fsp) // h2标题大小（基于段落字体动态计算） --fsh3: calc(%s + 7px) % var(--fsp) // h3标题大小（基于段落字体动态计算） --fsh4: calc(%s + 4px) % var(--fsp) // h4标题大小（基于段落字体动态计算） --side-content-width: 255px // 侧边栏内容宽度（默认255px） --gap-margin: 11px // 元素外部间距（元素间距离） --gap-padding: 11px // 元素内部间距（内容到边框距离） 同时还需要在layout.styl中添加如下内容，高度随内容自适应，且底部有适度留白，兼顾功能和美观。 layout.styl// 普通屏幕布局.l_body .l_left margin-bottom: 16px; // 只保留少量底部留白（数值按需调整）// 手机端布局@media screen and (max-width: $device-mobile-max) .l_body .l_left padding-bottom: 8px; // 少量底部内边距（按需调整） 调整后页面整体效果如下 12. 添加音乐播放器 参考 stellar主题使用meetingjs接入aplayer音乐播放器 - BoBoBlog 首先需要安装音乐播放器插件npm install --save hexo-tag-aplayer,在根目录主题配置文件里面添加以下内容，开启metingjs。 _config.yamlaplayer: # 示例配置 cdn: https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js style_cdn: https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css meting: true meting_cdn: https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js 在想要添加音乐播放器的位置添加以下代码块，这是一个md格式的网易云歌单，有时候会和toc有冲突，无法实现跳转。 % meting 14222331844 netease playlist autoplay mutex:true listmaxheight:340px lrctype:0 preload:none theme:#1cd0fd storagename:metingjs% 修改主题样式文件aplayer.styl，修改播放器参数，播放器颜色跟随系统主题。 查看代码 aplayer.styl.md-text .aplayer border-radius: $border-card/* aplayer-theme.css - 支持手动和系统主题切换的Aplayer样式 *//* ===== CSS变量定义 ===== *//* 默认亮色主题变量 */:root --aplayer-bg: #ffffff; /* 播放器主背景色 */ --aplayer-toolbar-bg: #f8f9fa; /* 工具栏/控制器背景色 */ --aplayer-text: #373737; /* 主要文字颜色 */ --aplayer-border: #e9e9e9; /* 边框颜色 */ --aplayer-hover-bg: #efefef; /* 鼠标悬停背景色 */ --aplayer-hover-text: #ff5722; /* 鼠标悬停文字颜色 */ --aplayer-active-bg: #e9ecef; /* 当前选中项背景色（比普通背景更深） */ --aplayer-active-text: #2c2c2c; /* 当前选中项文字颜色（亮色主题下保持深色） */ --aplayer-list-item-height: 32px; /* 列表项高度 */ --aplayer-list-item-padding: 0 15px; /* 列表项内边距 */ --aplayer-list-item-font-size: 12px; /* 列表项字体大小 */ --aplayer-list-light-font-size: small; /* 当前选中项字体大小 */ --aplayer-list-light-font-weight: bold; /* 当前选中项字体粗细 */ --aplayer-hover-font-size: small; /* 悬停时字体大小 */ --aplayer-hover-font-weight: bold; /* 悬停时字体粗细 *//* 暗色主题变量 - 通过[data-theme=dark]属性应用 */[data-theme=dark] --aplayer-bg: #1e1e1e; /* 播放器主背景色 */ --aplayer-toolbar-bg: #1e1e1e; /* 工具栏/控制器背景色 */ --aplayer-text: #ffffffff; /* 主要文字颜色 */ --aplayer-border: #383d42; /* 边框颜色 */ --aplayer-hover-bg: #3d3d3d; /* 鼠标悬停背景色 */ --aplayer-hover-text: #ff5722; /* 鼠标悬停文字颜色 */ --aplayer-active-bg: #4a4a4a; /* 当前选中项背景色（比普通背景更深） */ --aplayer-active-text: #01686dff; /* 当前选中项文字颜色（暗色主题下使用更亮的白色，提高对比度） *//* 系统主题检测作为备用方案 - 当没有手动设置主题时生效 */@media (prefers-color-scheme: dark) :root:not([data-theme]) /* 选择没有设置data-theme属性的根元素 */ --aplayer-bg: #1e1e1e; /* 播放器主背景色 */ --aplayer-toolbar-bg: #1e1e1e; /* 工具栏/控制器背景色 */ --aplayer-text: #ffffffff; /* 主要文字颜色 */ --aplayer-border: #383d42; /* 边框颜色 */ --aplayer-hover-bg: #3d3d3d; /* 鼠标悬停背景色 */ --aplayer-hover-text: #ff5722; /* 鼠标悬停文字颜色 */ --aplayer-active-bg: #4a4a4a; /* 当前选中项背景色（比普通背景更深） */ --aplayer-active-text: #01686dff; /* 当前选中项文字颜色（暗色主题下使用更亮的白色，提高对比度） */ /* ===== Aplayer整体样式 ===== */.aplayer background: var(--aplayer-bg); /* 背景色使用CSS变量 */ color: var(--aplayer-text); /* 文字颜色使用CSS变量 */ font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Open Sans, Helvetica Neue, sans-serif; /* 字体族设置 */ border-radius: 6px; /* 圆角边框 */ box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* 阴影效果 */ transition: all 0.3s ease; /* 过渡动画效果 *//* ===== 工具栏/控制器区域样式 ===== */.aplayer .aplayer-info,.aplayer .aplayer-controller,.aplayer .aplayer-body background: var(--aplayer-toolbar-bg); /* 使用工具栏专用背景色 */ transition: background-color 0.3s ease; /* 背景色过渡效果 */.aplayer .aplayer-info border-bottom: 1px solid var(--aplayer-border); /* 底部边框 */ padding: 12px 15px; /* 内边距 */.aplayer .aplayer-info .aplayer-music color: var(--aplayer-text); /* 文字颜色 */.aplayer .aplayer-info .aplayer-music .aplayer-title color: var(--aplayer-active-text); /* 使用更突出的颜色 */ font-weight: bold; /* 字体加粗 */.aplayer .aplayer-controller border-top: 1px solid var(--aplayer-border); /* 顶部边框 */ padding: 8px 15px; /* 内边距 *//* ===== 进度条样式 ===== */.aplayer .aplayer-bar background: var(--aplayer-border); /* 轨道背景色 */.aplayer .aplayer-loaded background: var(--aplayer-hover-bg); /* 已加载部分背景色 */.aplayer .aplayer-played background: var(--aplayer-hover-text); /* 已播放部分背景色 */.aplayer .aplayer-thumb background: var(--aplayer-hover-text); /* 拖拽点背景色 */ box-shadow: 0 0 5px rgba(0, 0, 0, 0.2); /* 拖拽点阴影 *//* ===== 时间显示样式 ===== */.aplayer .aplayer-time color: var(--aplayer-text); /* 时间文字颜色 *//* ===== 音量控制样式 ===== */.aplayer .aplayer-volume-wrap .aplayer-volume-bar background: var(--aplayer-border); /* 音量轨道背景色 */.aplayer .aplayer-volume-wrap .aplayer-volume background: var(--aplayer-hover-text); /* 音量滑块背景色 *//* ===== 播放列表样式 ===== */.aplayer .aplayer-list border-top: 1px solid var(--aplayer-border); /* 顶部边框 */ max-height: 300px; /* 最大高度限制 */ overflow-y: auto; /* 垂直方向溢出时显示滚动条 */ background: var(--aplayer-bg); /* 列表背景色 */.aplayer .aplayer-list ol li position: relative; /* 相对定位 */ height: var(--aplayer-list-item-height); /* 固定高度 */ line-height: var(--aplayer-list-item-height); /* 行高等于高度，实现垂直居中 */ padding: var(--aplayer-list-item-padding); /* 内边距 */ font-size: var(--aplayer-list-item-font-size); /* 字体大小 */ border-top: 1px solid var(--aplayer-border); /* 顶部边框 */ cursor: pointer; /* 鼠标指针样式 */ transition: all 0.2s ease; /* 过渡动画效果 */ overflow: hidden; /* 隐藏溢出内容 */ margin: 0; /* 外边距归零 */ color: var(--aplayer-text); /* 文字颜色 */ background-color: var(--aplayer-bg); /* 背景色 */.aplayer .aplayer-list ol li:first-child border-top: none; /* 无边框 */.aplayer .aplayer-list ol li.aplayer-list-light background: var(--aplayer-active-bg); /* 使用更深的背景色突出显示 */ color: var(--aplayer-active-text); /* 文字颜色使用更亮的白色，提高对比度 */ font-size: var(--aplayer-list-light-font-size); /* 字体大小 */ font-weight: var(--aplayer-list-light-font-weight); /* 字体粗细 */ position: relative; /* 相对定位 */.aplayer .aplayer-list ol li.aplayer-list-light::before content: ; /* 伪元素内容为空 */ position: absolute; /* 绝对定位 */ left: 0; /* 左侧对齐 */ top: 0; /* 顶部对齐 */ height: 100%; /* 高度100% */ width: 3px; /* 宽度3像素 */ background: var(--aplayer-hover-text); /* 指示条颜色 */.aplayer .aplayer-list ol li:hover background: var(--aplayer-hover-bg); /* 悬停背景色 */ color: var(--aplayer-hover-text); /* 悬停文字颜色 */ font-size: var(--aplayer-hover-font-size); /* 悬停时字体大小 */ font-weight: var(--aplayer-hover-font-weight); /* 悬停时字体粗细 *//* ===== 滚动条样式 ===== */.aplayer .aplayer-list::-webkit-scrollbar width: 6px; /* 滚动条宽度 */.aplayer .aplayer-list::-webkit-scrollbar-track background: var(--aplayer-bg); /* 轨道背景色 */.aplayer .aplayer-list::-webkit-scrollbar-thumb background: var(--aplayer-border); /* 滑块背景色 */ border-radius: 3px; /* 滑块圆角 */.aplayer .aplayer-list::-webkit-scrollbar-thumb:hover background: var(--aplayer-hover-text); /* 悬停时滑块背景色 *//* ===== 播放按钮样式 ===== */.aplayer .aplayer-play width: 22px; /* 宽度 */ height: 22px; /* 高度 */ border: 1px solid var(--aplayer-border); /* 边框 */ border-radius: 50%; /* 圆形边框 */ display: flex; /* 弹性布局 */ align-items: center; /* 垂直居中 */ justify-content: center; /* 水平居中 */ transition: all 0.2s ease; /* 过渡动画 */.aplayer .aplayer-play:hover border-color: var(--aplayer-hover-text); /* 悬停时边框颜色 */ background: var(--aplayer-hover-bg); /* 悬停时背景色 *//* ===== 歌词面板样式 ===== */.aplayer .aplayer-lrc background: var(--aplayer-toolbar-bg); /* 背景色 */ border-top: 1px solid var(--aplayer-border); /* 顶部边框 */.aplayer .aplayer-lrc .aplayer-lrc-current color: var(--aplayer-active-text); /* 当前歌词文字颜色使用更亮的颜色 */ font-weight: bold; /* 字体加粗 *//* ===== 迷你模式样式 ===== */.aplayer.aplayer-mini .aplayer-body background: var(--aplayer-toolbar-bg); /* 背景色 */.aplayer.aplayer-mini .aplayer-info background: transparent; /* 透明背景 */.aplayer.aplayer-mini .aplayer-info .aplayer-music .aplayer-title color: var(--aplayer-active-text); /* 使用更突出的颜色 */ font-weight: bold; /* 字体加粗 *//* ===== 艺术家和专辑信息样式 ===== */.aplayer .aplayer-info .aplayer-music .aplayer-author color: var(--aplayer-text); /* 艺术家文字颜色 */ opacity: 1; /* 透明度稍低，作为次要信息 */.aplayer .aplayer-list ol li.aplayer-list-light .aplayer-list-author color: var(--aplayer-active-text); /* 当前歌曲艺术家信息使用更亮的颜色 */ opacity: 1; /* 降低透明度，但仍保持可读性 */ 13. 背景动态设置 13.1 随机线条效果 主题文件layout.ejs文件中添加以下代码 layout.ejsscript type=text/javascriptcolor=0,0,255 opacity=0.7 zIndex=-2 count=99 src=//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js/script color ：线条颜色, 默认: '0,0,0'；三个数字分别为(R,G,B) opacity: 线条透明度（0~1）, 默认: 0.5 count: 线条的总数量, 默认: 150 zIndex: 背景的z-index属性，CSS属性用于控制所在层的位置, 默认: -1 终端运行hexo clean 清除缓存，hexo ghexo s渲染网页后本地预览。 手机端显示很乱，影响阅览网页，已弃用。 13.2 随机樱花效果 参考以下文章，修改成可以替换任意图像元素效果。 Hexo添加雪花动态效果背景 | 花猪のBlog Hexo添加樱花动态效果背景 | 花猪のBlog base64图片太长了，占用空间大，提取base64编码转换成图片，上传图床。 新建sakura.js文件 代码折叠 sakura.jsclass Sakura constructor(x, y, s, r, fn, image) this.x = x; this.y = y; this.s = s; this.r = r; this.fn = fn; this.image = image; draw(cxt) cxt.save(); cxt.translate(this.x, this.y); cxt.rotate(this.r); const size = 40 * this.s; cxt.drawImage(this.image, -size/2, -size/2, size, size); cxt.restore(); update() this.x = this.fn.x(this.x, this.y); this.y = this.fn.y(this.y, this.x); this.r = this.fn.r(this.r); if (this.x window.innerWidth || this.x 0 || this.y window.innerHeight || this.y 0) this.reset(); reset() this.r = getRandom(fnr)(); if (Math.random() 0.4) this.x = getRandom(x); this.y = 0; else this.x = window.innerWidth; this.y = getRandom(y); this.s = getRandom(s); this.r = getRandom(r); let stop = null;// 检测是否为移动设备function isMobileDevice() return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth = 768;function getRandom(option) switch (option) case x: return Math.random() * window.innerWidth; case y: return Math.random() * window.innerHeight; case s: return Math.random() * 0.5 + 0.3; case r: return Math.random() * Math.PI * 2; case fnx: return (x, y) = x + (Math.random() - 0.5) * 2 - 1; case fny: return (y, x) = y + 1.5 + Math.random(); case fnr: return (r) = r + Math.random() * 0.03; default: return 0; function startSakura(image) if (stop) cancelAnimationFrame(stop); const canvas = document.getElementById(canvas_sakura); if (canvas) canvas.remove(); const canvas = document.createElement(canvas); const cxt = canvas.getContext(2d); const sakuras = []; // 移动端优化 const isMobile = isMobileDevice(); const sakuraCount = isMobile ? 15 : 25; // 移动端减少樱花数量 canvas.height = window.innerHeight; canvas.width = window.innerWidth; canvas.style.cssText = position:fixed;left:0;top:0;pointer-events:none;z-index:9999;; canvas.id = canvas_sakura; document.body.appendChild(canvas); // 创建樱花实例 for (let i = 0; i sakuraCount; i++) sakuras.push(new Sakura( getRandom(x), getRandom(y), getRandom(s), getRandom(r), x: getRandom(fnx), y: getRandom(fny), r: getRandom(fnr) , image )); function animate() cxt.clearRect(0, 0, canvas.width, canvas.height); sakuras.forEach(sakura = sakura.update(); sakura.draw(cxt); ); stop = requestAnimationFrame(animate); stop = requestAnimationFrame(animate);function toggleSakura(imageUrl) if (stop) cancelAnimationFrame(stop); stop = null; const canvas = document.getElementById(canvas_sakura); if (canvas) canvas.remove(); return false; // 返回false表示已停止 else // 移动端检测 - 如果性能可能有问题，可以在这里禁用 if (isMobileDevice()) const enableOnMobile = confirm(在移动设备上运行樱花特效可能会影响性能。是否继续？); if (!enableOnMobile) return false; // 加载图片并启动 const img = new Image(); img.onload = function() startSakura(img); ; img.src = imageUrl; return true; // 返回true表示已启动 // 窗口调整大小时重置canvaswindow.addEventListener(resize, () = const canvas = document.getElementById(canvas_sakura); if (canvas) canvas.width = window.innerWidth; canvas.height = window.innerHeight; );// 页面卸载时清理资源window.addEventListener(beforeunload, () = if (stop) cancelAnimationFrame(stop); );// 在这里添加你的图片路径并启动特效// 将下面的 your-sakura-image-url.jpg 替换为你的樱花图片URLtoggleSakura(https://u.sam7.top/2NkzEk);// 导出函数供外部调用window.toggleSakura = toggleSakura;window.isMobileDevice = isMobileDevice; 14. 文章路由 参考博主BoBoBlog文章 使用Hexo和Stellar搭建个人博客网站【超详细贴心保姆级教程💖】 - BoBoBlog 能够解决中文网页标题转义的现象，并且创建文章自动添加abbrlink npm install hexo-abbrlink --save 在 blog/_config.yml 中找到对应 permalink 标签，进行修改即可： _config.yamlurl: sam7.toppermalink: :year:month/:title/ #:year/:month/:day/:title/abbrlink: alg: crc16 #算法： crc16(default) and crc32 rep: dec #进制： dec(default) and hexpermalink_defaults: 使用了这个每使用命令新建一篇文章会在头代码上插入abbrlink:及对应的转码后的代码, 这使得他会自动去匹配每个md文件的头代码中的abbrlink 不同算法、进制生成的链接格式如下： 算法 进制 生成链接示例 crc16 hex https://yourname.github.io/p/66c8.html crc16 dec https://yourname.github.io/p/65535.html crc32 hex https://yourname.github.io/p/8ddf18fb.html crc32 dec https://yourname.github.io/p/1690090958.html 15. 主题深浅色切换 参考博主BoBoBlog，主题颜色设置为自动。 主题配置文件style: prefers_theme: auto # auto / light / dark smooth_scroll: true # true / false 开启时如果目录过长可能无法准确定位 15.1 功能实现 首先在 主题配置文件中footer.social处增加“主题切换”按钮配置，图标为半圆，点击可用于一键切换深浅色。 主题配置文件footer: social: theme: icon: i class=fa-solid fa-circle-half-stroke fa-fade style=color: #F9D923;/i title: 主题切换 url: javascript:void(0); 下一步需要在前端JS中实现主题切换功能，并为页脚“主题切换”按钮绑定点击事件。 在main.js末尾增加如下代码，实现以下功能，默认跟随系统颜色变化，单击按钮切换主题深浅色。 查看代码 main.js// 主题切换按钮逻辑function setTheme(theme) document.documentElement.setAttribute(data-theme, theme); localStorage.setItem(theme, theme);function toggleTheme() const current = document.documentElement.getAttribute(data-theme); setTheme(current === dark ? light : dark);// 自动读取本地存储(function() const saved = localStorage.getItem(theme); if (saved) setTheme(saved);)();// 跟随系统颜色变化(function() // 优先本地存储 const saved = localStorage.getItem(theme); if (saved) setTheme(saved); else // 跟随系统 const mq = window.matchMedia((prefers-color-scheme: dark)); setTheme(mq.matches ? dark : light); mq.addEventListener(change, function(e) // 仅当未手动切换时才跟随系统 if (!localStorage.getItem(theme)) setTheme(e.matches ? dark : light); ); )();// 绑定页脚按钮点击事件window.addEventListener(DOMContentLoaded, function () // 支持多种渲染方式，自动识别按钮 const themeBtns = document.querySelectorAll(.fa-circle-half-stroke); themeBtns.forEach(function(btn) btn.addEventListener(click, function (e) e.preventDefault(); toggleTheme(); ); );); 15.2 主题颜色调整 深浅色主题、侧边栏、卡片、代码块颜色调整，将theme_base.styl主题基本颜色修改成如下内容。 查看代码 theme_base.styl// 通用 hsla 函数x-hsla(h = var(--hue), s = var(--sat), l = var(--light), a = var(--alpha)) return unquote(hsla(%s %s %s / %s) % (h s l a))// 设置不同透明度的主题色x-theme-alpha(a = 1) return unquote(hsla(%s %s %s / %s) % (var(--hue) var(--sat) var(--light) a))// 设置基础主题色x-set-theme-with-color($color) --hue: hue($color) --sat: saturation($color) --light: lightness($color) --alpha: alpha($color) --theme: x-theme-alpha(1) --theme-a10: x-theme-alpha(0.1) --theme-a20: x-theme-alpha(0.2) --theme-a30: x-theme-alpha(0.3)// 设置链接颜色x-set-link-with-color($color) $hue = hue($color) $sat = saturation($color) $light = lightness($color) --link: x-hsla($hue, $sat, $light, 1) --link-a20: x-hsla($hue, $sat, $light, 0.2)// 设置背景色x-set-bg-colors($scheme) $hue = $c-base-hue $sat = 0% $light = $scheme == dark ? 0% : 100% --bg-a20: x-hsla($hue, $sat, $light, 0.2) --bg-a50: x-hsla($hue, $sat, $light, 0.5) --bg-a60: x-hsla($hue, $sat, $light, 0.6) --bg-a75: x-hsla($hue, $sat, $light, 0.75) --bg-a100: x-hsla($hue, $sat, $light, 1)// 设置文本及相关色x-set-text-colors($scheme, $p0 = 1, $p1 = 0.8, $p2 = 0.7, $p3 = 0.5, $p4 = 0.4) $hue = $c-base-hue $sat = 0% $light = $scheme == dark ? 100% : 0% --text: x-hsla($hue, $sat, $light, $p0) --text-reverse: x-hsla($hue, $sat, $scheme == dark ? 0% : 100%, $p0) --text-p1: x-hsla($hue, $sat, $light, $p1) --text-p2: x-hsla($hue, $sat, $light, $p2) --text-p3: x-hsla($hue, $sat, $light, $p3) --text-p4: x-hsla($hue, $sat, $light, $p4) --text-meta: x-hsla($hue, $sat, $light, 0.2) --text-code: x-hsla($hue, $sat, $light, 0.9) --text-a10: x-hsla($hue, $sat, $light, 0.1) --text-a20: x-hsla($hue, $sat, $light, 0.2) $sat = $scheme == dark ? 24% : 50% $light = $scheme == dark ? 72% : 12% $alpha = $scheme == dark ? 0.08 : 0.04 --block: x-hsla($hue, $sat, $light, $alpha) --block-border: x-hsla($hue, $sat, $light, $alpha * 1.5)// 设置图片滤镜 - 深色模式图片背景为#31383A，对比度更低x-set-image-filters($scheme) if $scheme == dark --image-filter: invert(1) hue-rotate(180deg) --image-brightness: 0.65 // 降低亮度，使背景接近#31383A --image-contrast: 0.85 // 进一步降低对比度 --image-saturate: 0.9 // 稍微降低饱和度 --image-filter-value: invert(1) hue-rotate(180deg) brightness(0.65) contrast(0.85) saturate(0.9) else --image-filter: none --image-brightness: 1 --image-contrast: 1 --image-saturate: 1 --image-filter-value: none// ---------------- apply theme ----------------// 设置浅色模式dynamic-theme-light() $hue = $c-base-hue --background: x-hsla($hue, 20%, 98%, 1) --card: $site-background-image ? hsla(white, 0.5) : white x-set-bg-colors(light) x-set-text-colors(light) x-set-image-filters(light)// 设置深色模式dynamic-theme-dark() $hue = $c-base-hue --background: x-hsla($hue, 8%, 12%, 1) @media screen and (max-width: $device-mobile-max) --background: black --card: $site-background-image ? hsla(white, 0.25) : x-hsla($hue, 10%, 24%, 1) x-set-bg-colors(dark) x-set-text-colors(dark) x-set-image-filters(dark) --text-code: x-hsla(20, 75, 60, 1):root // 主题色 x-set-theme-with-color($c-theme) // 强调色 --accent: $c-accent // 链接 x-set-link-with-color($c-link) // dynamic colors dynamic-theme-light() @media (prefers-color-scheme: dark) dynamic-theme-dark():root[data-theme=light] dynamic-theme-light():root[data-theme=dark] dynamic-theme-dark()// ========== 图片主题变化解决方案 ==========// 深色模式下的图片滤镜应用 - 背景为#31383A，对比度更低，保护左侧栏:root[data-theme=dark] // 应用滤镜到内容区域的图片 .post-content img, .article-content img, .entry-content img, .markdown-body img, .content img, .post-body img, [class*=content] img:not(.no-theme):not(.emoji) filter: invert(1) hue-rotate(180deg) brightness(0.65) contrast(0.85) saturate(0.9) transition: filter 0.3s ease // 保护左侧栏和其他UI元素 .sidebar img, .widget img, .navbar img, .header img, .footer img, .avatar, .logo, .site-brand img, .site-logo img, .author-avatar img, .no-theme filter: none !important // 对于需要更浅背景的图片 img[data-light-bg], .light-bg-img filter: invert(1) hue-rotate(180deg) brightness(0.8) contrast(0.9) saturate(0.95) !important // 对于需要保持较深背景的图片 img[data-dark-bg], .dark-bg-img filter: invert(1) hue-rotate(180deg) brightness(0.5) contrast(0.8) saturate(0.85) !important// 表情图片不随主题变化.emoji,.emoticon,[class*=emoji],[class*=emoticon],img[src*=emoji],img[src*=emoticon],img[data-emoji] filter: none !important// 方法2: 使用CSS变量（如果浏览器支持）img.theme-aware:not(.emoji) filter: var(--image-filter-value) transition: filter 0.3s ease// 方法3: 为特定类型的图片添加主题支持.themed-image:not(.emoji) :root[data-theme=dark] filter: invert(1) hue-rotate(180deg) brightness(0.65) contrast(0.85) saturate(0.9) transition: filter 0.3s ease :root[data-theme=light] filter: none transition: filter 0.3s ease// 确保左侧栏图片不受影响.sidebar,.widget,.navbar,.header,.footer img filter: none !important// 额外选项：如果需要完全禁用某些图片的主题变化.no-theme,[data-no-theme] filter: none !important 主题配置文件中修改如下 主题配置文件leftbar: # 可以设置：纯色/渐变色/图片作为背景 background-color: var(--block) #var(--card) var(--block) background-image: #url(https://gcore.jsdelivr.net/gh/cdn-x/placeholder@1.0.13/image/sidebar-bg1@small.jpg) blur-px: 11px blur-bg: var(--bg-a33) background-opacity: 1paginator: prev: https://gcore.jsdelivr.net/gh/cdn-x/placeholder@1.0.12/arrow/f049bbd4e88ec.svg next: https://gcore.jsdelivr.net/gh/cdn-x/placeholder@1.0.12/arrow/064b95430caf4.svgerror_page: https://gcore.jsdelivr.net/gh/cdn-x/placeholder@1.0.12/404/1c830bfcd517d.svgsite: # 使用 background-image 后，blur 设置才有效 background-color: var(--background) #var(--bg-a11) var(--background) background-image: #url(https://t.alcy.cc/fj) blur-px: 14px # 增加模糊度使背景不突兀 blur-bg: var(--bg-a55) blur-sat: 100% # 适当降低饱和度使背景不抢眼 15.3 其他 waline评论和aplayer播放器都有适配，由于篇幅问题，对应章节都有描述。 16. AI摘要 stellar集成tianti GPT，付费的，洪墨AI这里购买添加key就好了，绑定网页。 # AI 摘要 # https://github.com/qxchuckle/Post-Summary-AI tianli_gpt: enable: true js: https://jsd.onmicrosoft.cn/gh/qxchuckle/Post-Summary-AI@6.0/chuckle-post-ai.min.js field: all # all, post, wiki key: S-JAVXPRUNPV8LWXO4 # tianli_gpt key 17. 字体设置 中文网字计划-提供便捷实用的全字符集中文渲染方案 Maple Mono NF-CN - ZeoSeven Fonts (ZSFT) 根目录配置文件中，最后一行加入以下指令： 根目录配置文件inject: head: - link rel=stylesheet href=https://cdn.staticfile.org/lxgw-wenkai-screen-webfont/1.6.0/lxgwwenkaiscreen.css #字体引入 - | link rel=preload as=style crossorigin href=https://fontsapi.zeoseven.com/442/main/result.css onload=this.rel=stylesheet onerror=this.href=https://fontsapi-storage.zeoseven.com/442/main/result.css / noscript link rel=stylesheet href=https://fontsapi.zeoseven.com/442/main/result.css / /noscript 在主题配置文件中找到 style.font-family，修改以下内容： 主题配置文件style: prefers_theme: auto # auto / light / dark smooth_scroll: true # true / false 开启时如果目录过长可能无法准确定位 font-size: root: 16px # 改这个会影响全局所有文字的字号 body: 16px # 影响正文区域的字号，如果改成 px 则不受 root 影响 code: 75% # 相较于其所在行的文本大小，建议用百分比 codeblock: 0.8125rem # 13px font-family: body: LXGW WenKai Screen,system-ui, Microsoft Yahei, Segoe UI, Arial, sans-serif code: Maple Mono NF CN, Menlo, Monaco, Consolas, system-ui, monospace, sans-serif codeblock: Maple Mono NF CN, Menlo, Monaco, Consolas, system-ui, monospace, sans-serif text-align: left 18. 域名申请 【EU.ORG】免费域名 Cloudflare 解析 ORG 域名 - YOLOのBLOG 终身免费 ORG 顶级域名申请 - YOLOのBLOG 提交域名申请已经过去一个月了，还没通过审核，石沉大海了。 [Cloudns]免费二级域名 人人有份！免费领取一个永久域名并托管到Cloudflare做双向解析 - 知乎 Cloudns二级域名Cloudflare和Vercel无法解析，只能在Cloudns使用DNS记录。 Github可以重定向，域名没有时间限制，但证书只有三个月，不知道会不会续签。 [DigitalPlat]免费域名 DigitalPlat免费二级域名注册和Cloudflare托管教程-CSDN博客 使用Cloudflate搭建自己的免费代理节点 DigitalPlat最多可以申请两个域名，只有一年使用期限，小于180天可以续期，虽然是二级域名，但可以被cloudflare、vercel托管。 购买域名 国内价格对比了几家都差不太多，阿里云要便宜些，top域名比较便宜第一年8块10年240块，有活动可以更优惠。 19. RSS订阅 参考博主BoBoBlog 可用于搜索引擎和友链拉取动态npm i hexo-generator-feed安装插件，根目录下配置文件添加如下内容 _config.ymlblog/_config.ymlfeed: type: atom # RSS的类型(atom/rss2) path: atom.xml # 文件路径,默认是atom.xml/rss2.xml limit: 20 # 展示文章的数量,使用0或则false代表展示全部hub# hub:# content: # 在RSS文件中是否包含内容 ,有3个值 true/false默认不填为false# content_limit: # 指定内容的长度作为摘要,仅仅在上面content设置为false和没有自定义的描述出现# content_limit_delim: #上面截取描述的分隔符,截取内容是以指定的这个分隔符作为截取结束的标志.在达到规定的内容长度之前最后出现的这个分隔符之前的内容，防止从中间截断 然后在主题配置文件中加入以下内容，添加左侧栏footer小图标： _config.stellar.ymlfooter: social:\trss: icon: i class=fa-solid fa-rss fa-shake/i url: /atom.xml rss: /atom.xml 20. 关于、留言板 在博客源文件夹source中，新建about messages文件夹，在相应文件夹中新建index.md，或者直接在源文件夹下面新建about.md和messages.md,markdown内容即为展示内容,使用时直接用/about /messages指定路径。 # 这里配置子菜单，使用 nested 字段nested: - id: archives title: 归档 url: /archives - id: categories title: 分类 url: /categories - id: tags title: 标签 url: /tags - id: messages title: 留言 url: /messages - id: rss title: RSS url: /atom.xml - id: friends title: 友链 url: /friends - id: about title: 关于 url: /about","tags":["hexo配置","stellar主题"],"categories":["博客搭建"]},{"title":"关于作者","path":"/about/index.html","content":"/* 强制隐藏面包屑、目录和AI摘要 */ .article.banner.top, .post-ai, .toc, .wl-reaction, .table-of-contents { display: none !important; } [data-theme=\"light\"] { --primary-color: #A8B8E0; --primary-light: #B8C8F0; --primary-dark: #7A95D6; --bg-color: #fefefe; --card-bg: #f9fafb; --text-color: #374151; --text-light: #6b7280; --border-color: #e5e7eb; --shadow: 0 2px 8px rgba(0,0,0,0.05); } [data-theme=\"dark\"] { --primary-color: #6B8CD8; --primary-light: #8BA6F0; --primary-dark: #5A7BC7; --bg-color: #1f2937; --card-bg: #374151; --text-color: #f3f4f6; --text-light: #d1d5db; --border-color: #4b5563; --shadow: 0 2px 8px rgba(0,0,0,0.15); } .about-page { max-width: 900px; margin: 0 auto; padding: 15px; font-family: \"LXGW WenKai Screen\"; line-height: 1.5; color: var(--text-color); background-color: var(--bg-color); transition: all 0.3s ease; position: relative; } /* 个人简介卡片 */ .profile-card { display: flex; align-items: center; background: linear-gradient(135deg, var(--primary-light) 0%, var(--primary-color) 100%); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; box-shadow: var(--shadow); margin-top: 40px; } .avatar-container { margin-right: 20px; } .avatar { width: 80px; height: 80px; border-radius: 50%; border: 3px solid rgba(255,255,255,0.3); object-fit: cover; } .profile-content h1 { margin: 0 0 8px 0; font-size: 1.4em; font-weight: 600; } .subtitle { margin: 0 0 12px 0; opacity: 0.9; font-size: 1em; } .expertise-tags { display: flex; flex-wrap: wrap; gap: 6px; } .tag { background: rgba(255,255,255,0.25); padding: 4px 10px; border-radius: 14px; font-size: 0.85em; backdrop-filter: blur(5px); display: flex; align-items: center; gap: 5px; } /* 通用区块样式 */ .section { background: var(--card-bg); padding: 20px; border-radius: 8px; box-shadow: var(--shadow); margin-bottom: 20px; border: 1px solid var(--border-color); transition: all 0.3s ease; } .section h2 { margin-top: 0; margin-bottom: 15px; color: var(--text-color); font-size: 1.3em; border-bottom: 1px solid var(--border-color); padding-bottom: 8px; display: flex; align-items: center; gap: 8px; } /* 技能网格 */ .skills-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(260px, 1fr)); gap: 15px; } .skill-card { background: var(--bg-color); padding: 15px; border-radius: 6px; border-left: 3px solid var(--primary-color); transition: all 0.3s ease; } .skill-header { display: flex; align-items: center; margin-bottom: 12px; } .skill-icon { font-size: 1.5em; margin-right: 10px; width: 35px; text-align: center; color: var(--primary-color); } .skill-card h3 { margin: 0; color: var(--text-color); font-size: 1.1em; } .skill-card ul { margin: 0; padding-left: 18px; } .skill-card li { margin-bottom: 6px; color: var(--text-light); font-size: 0.9em; } /* 学习方向 */ .learning-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 15px; } .learning-card { background: var(--bg-color); padding: 15px; border: 1px solid var(--primary-light); border-radius: 6px; transition: all 0.3s ease; } .learning-card h3 { margin-top: 0; margin-bottom: 12px; color: var(--text-color); font-size: 1.1em; display: flex; align-items: center; gap: 8px; } .learning-card ul { margin: 0; padding-left: 18px; } .learning-card li { margin-bottom: 6px; color: var(--text-light); font-size: 0.9em; } /* 兴趣网格 */ .interests-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 12px; } .interest-item { display: flex; align-items: center; background: var(--bg-color); padding: 12px; border-radius: 6px; transition: all 0.3s ease; } .interest-icon { font-size: 1.5em; margin-right: 12px; width: 35px; text-align: center; color: var(--primary-color); } .interest-content h4 { margin: 0 0 4px 0; color: var(--text-color); font-size: 1em; } .interest-content p { margin: 0; color: var(--text-light); font-size: 0.85em; } /* 目的网格 */ .purpose-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 12px; } .purpose-card { background: var(--bg-color); padding: 15px; border-radius: 6px; text-align: center; transition: all 0.3s ease; } .purpose-card h4 { margin: 0 0 8px 0; color: var(--text-color); font-size: 1em; display: flex; align-items: center; justify-content: center; gap: 6px; } .purpose-card p { margin: 0; color: var(--text-light); font-size: 0.85em; line-height: 1.4; } /* 联系区块 */ .contact-section { background: linear-gradient(135deg, var(--primary-light) 0%, var(--primary-color) 100%); color: white; text-align: center; } .contact-section h2 { color: white; border-bottom-color: rgba(255,255,255,0.3); } .contact-intro { margin-bottom: 15px; opacity: 0.9; font-size: 0.95em; } .contact-info { background: rgba(255,255,255,0.15); padding: 12px; border-radius: 6px; margin-bottom: 15px; text-align: left; font-size: 0.9em; } .contact-info p { margin: 0 0 8px 0; } .contact-info p:last-child { margin-bottom: 0; } .contact-buttons { display: flex; justify-content: center; gap: 12px; flex-wrap: wrap; } .contact-btn { display: inline-flex; align-items: center; gap: 6px; padding: 8px 16px; background: rgba(255,255,255,0.25); color: white; text-decoration: none; border-radius: 20px; transition: all 0.3s ease; backdrop-filter: blur(5px); border: 1px solid rgba(255,255,255,0.3); font-size: 0.9em; } .contact-btn:hover { background: rgba(255,255,255,0.35); transform: translateY(-1px); } /* 响应式设计 */ @media (max-width: 768px) { .about-page { padding: 10px; } .profile-card { flex-direction: column; text-align: center; padding: 15px; margin-top: 30px; } .avatar-container { margin-right: 0; margin-bottom: 12px; } .skills-grid, .learning-grid, .interests-grid, .purpose-grid { grid-template-columns: 1fr; } .contact-buttons { flex-direction: column; align-items: center; } .contact-btn { width: 180px; justify-content: center; } } @media (max-width: 480px) { .profile-content h1 { font-size: 1.2em; } .section { padding: 15px 12px; } .interest-item { flex-direction: column; text-align: center; } .interest-icon { margin-right: 0; margin-bottom: 8px; } } /* 平滑过渡效果 */ * { transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease; } 开关电源设计 · 五年搬砖经验 擅长140W及以下功率的开关电源设计与优化 电源适配器 快充充电器 车载充电器 仪表电源 专业能力 电路设计 熟练使用 Altium Designer、KiCad 等软件进行原理图与PCB设计 熟悉开关电源PCB设计规范与安规要求 综合考虑EMC、热管理、可制造性等因素 电路拓扑 熟练掌握 Buck、Boost、Buck-Boost、Flyback、AHB等拓扑 熟练掌握PFC电路、恒压恒流等电路 设计验证 熟悉元器件选型计算与性能分析 了解开关电源性能指标 熟练掌握电源性能测试方法 学习方向 软件技能提升 Python - 电路仿真与数据分析 自动化脚本开发与应用 C语言与嵌入式系统学习 电源设计工具开发 硬件技术深化 大功率电源设计技术 大功率电源拓扑学习 环路稳定性分析与优化 电磁兼容性设计与仿真 个人兴趣 跑步爱好者 科学训练 · 运动康复 音乐娱乐 音乐欣赏 · 游戏动漫 拥抱开源 开源软件 · 技术分享 写作初衷 技术沉淀 记录工作中的技术难题与解决方案，形成个人知识体系 跑步记录 分享训练心得、伤痛管理经验与科学训练方法 经验分享 整理个人在电源设计中的一些心得，希望能与同行交流探讨 学习成长 记录学习历程，见证个人技能与认知的持续提升 交流联系 如果您对电源设计、技术分享或跑步相关有兴趣，欢迎与我交流探讨！ 擅长领域：开关电源设计 · PCB设计 · 电源测试 学习方向：大功率电源拓扑 · 电源仿真 · Python 邮箱 GitHub 留言 首页 归档 分类 标签 RSS 友链"},{"path":"/friends/index.html","content":""},{"title":"留言板","path":"/messages/index.html","content":"/* 强制隐藏面包屑、目录和AI摘要 */ .article.banner.top, .post-ai, .toc, .wl-reaction, .table-of-contents { display: none !important; } /* 确保主要内容区域占据全部宽度 */ .main-content, .content-area { width: 100% !important; max-width: 100% !important; margin: 0 auto !important; } /* 留言板自定义样式 - 紧凑布局 */ .message-board { max-width: 100%; margin: 0 auto; padding: 1rem; } .welcome-section { text-align: center; margin-bottom: 1.5rem; padding: 1.5rem; background: linear-gradient(135deg, var(--theme-primary-light, #e8edff) 0%, var(--theme-bg-light, #f0f5ff) 100%); border-radius: 10px; color: var(--theme-text, #2c3e50); box-shadow: 0 3px 8px rgba(0,0,0,0.08); border: 1px solid var(--theme-border, #d1d8e0); } .welcome-section h1 { font-size: 1.8rem; margin-bottom: 0.6rem; font-weight: 500; color: var(--theme-primary, #3498db); } .welcome-section p { font-size: 0.95rem; line-height: 1.4; max-width: 500px; margin: 0 auto; color: var(--theme-text-secondary, #5a6c7d); } .features-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 1rem; margin: 1.2rem 0; } .feature-card { background: var(--theme-card-bg, #ffffff); padding: 1.2rem 0.8rem; border-radius: 8px; text-align: center; box-shadow: 0 2px 6px rgba(0,0,0,0.06); border: 1px solid var(--theme-border, #e1e8f0); transition: all 0.2s ease; } .feature-card:hover { transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.1); } .feature-icon { font-size: 1.4rem; margin-bottom: 0.6rem; color: var(--theme-primary, #3498db); } .feature-card h3 { margin-bottom: 0.5rem; color: var(--theme-text, #2c3e50); font-size: 1rem; font-weight: 600; } .feature-card p { color: var(--theme-text-secondary, #5a6c7d); font-size: 0.85rem; line-height: 1.3; margin: 0; } .quick-links { display: flex; justify-content: center; gap: 0.6rem; margin: 1.5rem 0; flex-wrap: wrap; } .quick-link { padding: 0.5rem 1rem; background: var(--theme-card-bg, #ffffff); border-radius: 6px; text-decoration: none; color: var(--theme-text, #2c3e50); transition: all 0.2s ease; border: 1px solid var(--theme-border, #e1e8f0); font-weight: 500; font-size: 0.85rem; } .quick-link:hover { background: var(--theme-primary, #3498db); color: white; transform: translateY(-1px); } .tips-section { text-align: center; margin: 1.2rem 0; padding: 0.7rem 1rem; background: var(--theme-bg-light, #f0f5ff); border-radius: 6px; border-left: 3px solid var(--theme-primary, #3498db); font-size: 0.85rem; } .tips-section p { margin: 0; color: var(--theme-text-secondary, #5a6c7d); line-height: 1.3; } .comments-section { margin-top: 1.5rem; padding: 1.2rem; background: var(--theme-card-bg, #ffffff); border-radius: 8px; border: 1px solid var(--theme-border, #e1e8f0); } /* 浅色主题优化 */ :root { --theme-primary: #3498db; --theme-bg-light: #f0f5ff; --theme-card-bg: #ffffff; --theme-border: #e1e8f0; --theme-text: #2c3e50; --theme-text-secondary: #5a6c7d; --theme-primary-light: #e8edff; } /* 暗色模式适配 */ @media (prefers-color-scheme: dark) { :root { --theme-primary: #5dade2; --theme-bg-light: #1a2433; --theme-card-bg: #2c3e50; --theme-border: #34495e; --theme-text: #ecf0f1; --theme-text-secondary: #bdc3c7; --theme-primary-light: #1a252f; } } /* 响应式设计 */ @media (max-width: 768px) { .message-board { padding: 0.8rem; } .welcome-section { padding: 1.2rem 0.8rem; margin-bottom: 1.2rem; } .welcome-section h1 { font-size: 1.6rem; } .features-grid { grid-template-columns: 1fr; gap: 0.8rem; } .quick-links { flex-direction: column; align-items: center; gap: 0.5rem; } .quick-link { width: 100%; max-width: 180px; text-align: center; } } /* 紧凑动画效果 */ @keyframes fadeInUp { from { opacity: 0; transform: translateY(15px); } to { opacity: 1; transform: translateY(0); } } .feature-card, .welcome-section, .quick-link, .tips-section { animation: fadeInUp 0.3s ease forwards; opacity: 0; } .feature-card:nth-child(1) { animation-delay: 0.05s; } .feature-card:nth-child(2) { animation-delay: 0.1s; } .feature-card:nth-child(3) { animation-delay: 0.15s; } .quick-link:nth-child(1) { animation-delay: 0.2s; } .quick-link:nth-child(2) { animation-delay: 0.25s; } .quick-link:nth-child(3) { animation-delay: 0.3s; } .quick-link:nth-child(4) { animation-delay: 0.35s; } .tips-section { animation-delay: 0.4s; } 留言板 欢迎来到我的个人空间！这里是我们交流的专属区域，无论是技术探讨、生活分享、意见建议，还是简单的问候，都非常期待你的留言。每一份互动都是我持续创作和分享的动力源泉，感谢你的关注与支持！ 自由交流 畅所欲言地分享你的想法、建议或任何想说的话，无论是技术问题、生活感悟还是其他话题，我们都欢迎深入交流 实时通知 请留下有效的邮箱地址、您偏好的昵称与相关网址。您留言后，我会立即收到通知并尽快回复；同时，您也能通过邮箱接收回复提醒，确保不错过任何互动 富文本支持 支持Markdown语法、表情符号、代码高亮、图片上传等多种格式，让你的留言更加生动有趣且富有表现力 首页 归档 分类 标签 RSS 友链 关于 邮箱 GitHub document.addEventListener('DOMContentLoaded', function() { // 动态获取主题颜色 function updateThemeColors() { const root = document.documentElement; const computedStyle = getComputedStyle(root); let primaryColor = computedStyle.getPropertyValue('--color-primary').trim(); if (!primaryColor) { primaryColor = computedStyle.getPropertyValue('--theme-color').trim() || computedStyle.getPropertyValue('--primary-color').trim() || '#3498db'; } const bgColor = computedStyle.getPropertyValue('--bg-color').trim() || computedStyle.getPropertyValue('--background-color').trim() || getComputedStyle(document.body).backgroundColor; const rgb = bgColor.match(/\\d+/g); let brightness = 255; if (rgb) { brightness = (parseInt(rgb[0]) * 299 + parseInt(rgb[1]) * 587 + parseInt(rgb[2]) * 114) / 1000; } root.style.setProperty('--theme-primary', primaryColor); if (brightness > 128) { root.style.setProperty('--theme-bg-light', '#f0f5ff'); root.style.setProperty('--theme-card-bg', '#ffffff'); root.style.setProperty('--theme-border', '#e1e8f0'); root.style.setProperty('--theme-text', '#2c3e50'); root.style.setProperty('--theme-text-secondary', '#5a6c7d'); root.style.setProperty('--theme-primary-light', '#e8edff'); } else { root.style.setProperty('--theme-bg-light', '#1a2433'); root.style.setProperty('--theme-card-bg', '#2c3e50'); root.style.setProperty('--theme-border', '#34495e'); root.style.setProperty('--theme-text', '#ecf0f1'); root.style.setProperty('--theme-text-secondary', '#bdc3c7'); root.style.setProperty('--theme-primary-light', '#1a252f'); } } updateThemeColors(); const observer = new MutationObserver(updateThemeColors); observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class', 'style', 'data-theme'] }); });"}]